import React, { useState, useEffect, useCallback } from 'react';
import { 
  Download,
  AlertCircle, 
  CheckCircle, 
  Info, 
  BarChart3,
  RefreshCw,
  Eye,
  TrendingUp,
  Package,
  Send,
  Database,
  Save,
  FileSpreadsheet
} from 'lucide-react';

const API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';

// Helper function to safely get fiscal year display
const getFiscalYearDisplay = (fiscalInfo) => {
  return fiscalInfo?.current_year || '25-26';
};

const ProductAnalysis = ({ 
  uploadedFiles, 
  selectedSheets, 
  addMessage, 
  loading, 
  setLoading,
  onProductDataReceived,
  productDataIntegration,
  onAnalysisComplete,
  storedFiles = [],
  setStoredFiles = () => {},
  onFileAdd = () => {},
  salesMonthly
}) => {
  // State declarations
  const [activeSubTab, setActiveSubTab] = useState('tables'); // Default to tables tab
  const [productData, setProductData] = useState({
    mt: null,
    value: null
  });
  const [processing, setProcessing] = useState(false);
  const [fiscalInfo, setFiscalInfo] = useState({});
  const [integrationSent, setIntegrationSent] = useState(false);
  const [sessionTotalsExtracted, setSessionTotalsExtracted] = useState(false);
  const [autoExportEnabled, setAutoExportEnabled] = useState(true);
  const [hasAutoGenerated, setHasAutoGenerated] = useState(false);

  // Initialize from session storage
  useEffect(() => {
    const loadSessionData = () => {
      const storedData = sessionStorage.getItem('productAnalysisData');
      if (storedData) {
        try {
          const parsedData = JSON.parse(storedData);
          if (parsedData) {
            setProductData(parsedData.productData || { mt: null, value: null });
            setFiscalInfo(parsedData.fiscalInfo || {});
            setIntegrationSent(parsedData.integrationSent || false);
            setSessionTotalsExtracted(parsedData.sessionTotalsExtracted || false);
            addMessage('Loaded product analysis data from session', 'info');
          }
        } catch (error) {
          console.error('Error parsing session storage data:', error);
          addMessage('Failed to load session data', 'error');
        }
      }
    };

    loadSessionData();
  }, [addMessage]);

  // Save to session storage
  useEffect(() => {
    const saveSessionData = () => {
      const dataToStore = {
        productData,
        fiscalInfo,
        integrationSent,
        sessionTotalsExtracted,
        salesMonthly
      };
      sessionStorage.setItem('productAnalysisData', JSON.stringify(dataToStore));
    };

    saveSessionData();
  }, [productData, fiscalInfo, integrationSent, sessionTotalsExtracted, salesMonthly]);

  // Helper functions
  const canProcess = useCallback(() => {
    return uploadedFiles.budget && 
           selectedSheets.budget && 
           uploadedFiles.sales && 
           selectedSheets.sales;
  }, [uploadedFiles.budget, uploadedFiles.sales, selectedSheets.budget, selectedSheets.sales]);

  const extractSessionTotals = useCallback((mtData, valueData) => {
    try {
      const sessionTotals = {};
      
      if (mtData && mtData.data && mtData.data.length > 0) {
        const totalsRow = mtData.data.find(row => {
          const firstColumnValue = String(row[mtData.columns[0]] || '').toUpperCase();
          return firstColumnValue.includes('TOTAL') || 
                 firstColumnValue.includes('GRAND') ||
                 firstColumnValue.includes('SUM') ||
                 firstColumnValue.includes('AGGREGATE') ||
                 firstColumnValue.includes('ALL');
        });
        
        if (totalsRow) {
          sessionTotals.tonnage = totalsRow;
        } else {
          const lastRow = mtData.data[mtData.data.length - 1];
          sessionTotals.tonnage = lastRow;
        }
      }
      
      if (valueData && valueData.data && valueData.data.length > 0) {
        const totalsRow = valueData.data.find(row => {
          const firstColumnValue = String(row[valueData.columns[0]] || '').toUpperCase();
          return firstColumnValue.includes('TOTAL') || 
                 firstColumnValue.includes('GRAND') ||
                 firstColumnValue.includes('SUM') ||
                 firstColumnValue.includes('AGGREGATE') ||
                 firstColumnValue.includes('ALL');
        });
        
        if (totalsRow) {
          sessionTotals.value = totalsRow;
        } else {
          const lastRow = valueData.data[valueData.data.length - 1];
          sessionTotals.value = lastRow;
        }
      }
      
      return sessionTotals;
    } catch (error) {
      console.error('Error extracting session totals:', error);
      return {};
    }
  }, []);

  const storeFileInSession = useCallback(async (fileBlob, fileName, analysisType, fileDescription) => {
    try {
      const timestamp = new Date().toISOString();
      const fileUrl = URL.createObjectURL(fileBlob);
      
      const storedFileData = {
        id: `product_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
        name: fileName,
        blob: fileBlob,
        size: fileBlob.size,
        url: fileUrl,
        createdAt: timestamp,
        fiscalYear: getFiscalYearDisplay(fiscalInfo),
        type: `product-${analysisType}`,
        source: 'Product Analysis',
        description: fileDescription,
        mtRecords: analysisType === 'mt' || analysisType.includes('combined') ? 
          (productData.mt?.data?.length || 0) : 0,
        valueRecords: analysisType === 'value' || analysisType.includes('combined') ? 
          (productData.value?.data?.length || 0) : 0,
        sheets: analysisType.includes('combined') ? 
          ['Combined Product Analysis'] :
          analysisType === 'report' ?
          ['Executive Summary', 'Product_MT_Analysis', 'Product_Value_Analysis', 'Combined_Analysis'] :
          [`Product ${analysisType.toUpperCase()} Analysis`],
        analysisType: analysisType,
        metadata: {
          singleSheet: analysisType.includes('single-sheet'),
          bothTables: analysisType.includes('combined'),
          columnOrdered: true,
          fiscalYear: getFiscalYearDisplay(fiscalInfo),
          analysisType: 'product',
          isReport: analysisType === 'report',
          autoGenerated: analysisType.includes('auto'),
          integration: {
            combined_data_ready: true,
            sync_status: 'ready'
          }
        },
        tags: ['product', 'analysis', analysisType.includes('combined') ? 'combined' : 'individual']
      };

      console.log('Storing Product file (replacing previous):', {
        fileName,
        analysisType,
        fileSize: fileBlob.size
      });

      if (typeof setStoredFiles === 'function') {
        setStoredFiles(prev => {
          const oldProductFiles = prev.filter(f => f.type && f.type.includes('product'));
          oldProductFiles.forEach(file => {
            if (file.url) {
              URL.revokeObjectURL(file.url);
            }
          });
          
          const otherFiles = prev.filter(f => !f.type || !f.type.includes('product'));
          return [storedFileData, ...otherFiles];
        });
        
        console.log('Product file replaced (keeping only latest)');
        addMessage(`${fileName} stored (previous Product file replaced)`, 'success');
        return storedFileData;
      }
      
      if (typeof onFileAdd === 'function') {
        onFileAdd(storedFileData);
        console.log('Product file added via onFileAdd callback');
        addMessage(`${fileName} stored in Combined Excel Manager`, 'success');
        return storedFileData;
      }

      addMessage('File generated but could not be stored', 'warning');
      return null;
    } catch (error) {
      console.error('Error storing Product file:', error);
      addMessage(`Error storing file: ${error.message}`, 'error');
      return null;
    }
  }, [fiscalInfo, productData, addMessage, onFileAdd, setStoredFiles]);

  const autoGenerateProductReport = useCallback(async () => {
    if (!autoExportEnabled) {
      console.log('Auto-export disabled, skipping auto-generation');
      return;
    }
    
    const hasMtData = productData.mt && productData.mt.data && productData.mt.data.length > 0;
    const hasValueData = productData.value && productData.value.data && productData.value.data.length > 0;
    
    if (!hasMtData && !hasValueData) {
      console.log('No data available for auto-generation');
      return;
    }

    console.log('Auto-generating Product report...');

    try {
      const timestamp = new Date().toISOString().slice(0, 19).replace(/[:-]/g, '');
      const fileName = `product_auto_combined_${getFiscalYearDisplay(fiscalInfo)}_${timestamp}.xlsx`;

      const response = await fetch(`${API_BASE_URL}/product/download-combined-single-sheet`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          mt_data: productData.mt?.data || [],
          value_data: productData.value?.data || [],
          mt_columns: productData.mt?.columns || [],
          value_columns: productData.value?.columns || [],
          fiscal_year: getFiscalYearDisplay(fiscalInfo),
          include_both_tables: true
        })
      });

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      const blob = await response.blob();
      
      const fileDescription = `Auto-generated combined product-wise analysis with MT (${hasMtData ? productData.mt.data.length : 0} records) and Value (${hasValueData ? productData.value.data.length : 0} records) for fiscal year ${getFiscalYearDisplay(fiscalInfo)}`;
      await storeFileInSession(blob, fileName, 'combined-auto', fileDescription);
      
      addMessage(`Auto-generated: ${fileName}`, 'success');
      setHasAutoGenerated(true);
      return { success: true, filename: fileName };
    } catch (error) {
      console.error('Auto-generation error:', error);
      addMessage(`Auto-generation error: ${error.message}`, 'error');
      return { success: false, error: error.message };
    }
  }, [autoExportEnabled, addMessage, productData, storeFileInSession, fiscalInfo]);

  useEffect(() => {
    if (autoExportEnabled && productData.mt && productData.value && !hasAutoGenerated) {
      const timer = setTimeout(() => {
        autoGenerateProductReport();
      }, 2000);
      
      return () => clearTimeout(timer);
    }
  }, [productData.mt, productData.value, autoExportEnabled, hasAutoGenerated, autoGenerateProductReport]);

  const handleAnalysisSuccess = useCallback((mtResult, valueResult, resultFiscalInfo) => {
    console.log('Product Analysis Success:', {
      mtResult: !!mtResult,
      valueResult: !!valueResult,
      onFileAdd: typeof onFileAdd,
      setStoredFiles: typeof setStoredFiles,
      autoExportEnabled,
      currentStoredFiles: storedFiles.length
    });

    setProductData(prev => ({
      ...prev,
      mt: mtResult,
      value: valueResult
    }));
    
    if (resultFiscalInfo) {
      setFiscalInfo(resultFiscalInfo);
    }

    setHasAutoGenerated(false);

    if (onAnalysisComplete) {
      const sessionTotals = extractSessionTotals(mtResult, valueResult);
      
      onAnalysisComplete({
        mt_data: mtResult?.data,
        value_data: valueResult?.data,
        columns: {
          mt_columns: mtResult?.columns,
          value_columns: valueResult?.columns
        },
        fiscal_year: resultFiscalInfo?.current_year,
        sessionTotals,
        rowCounts: {
          mt: mtResult?.data?.length || 0,
          value: valueResult?.data?.length || 0
        }
      });
    }

    const mtRows = mtResult?.data?.length || 0;
    const valueRows = valueResult?.data?.length || 0;
    
    if (mtRows > 0 && valueRows > 0) {
      addMessage(`Product analysis completed successfully - MT: ${mtRows} products, Value: ${valueRows} products`, 'success');
    } else if (mtRows > 0) {
      addMessage(`Product analysis completed - MT: ${mtRows} products (Value data not available)`, 'success'); 
    } else if (valueRows > 0) {
      addMessage(`Product analysis completed - Value: ${valueRows} products (MT data not available)`, 'success');
    } else {
      addMessage('Product analysis completed but no data was generated. Please check your input files.', 'warning');
    }
  }, [onAnalysisComplete, autoExportEnabled, addMessage, onFileAdd, setStoredFiles, storedFiles.length, extractSessionTotals]);

  // Main processing function
  const processProductAnalysis = useCallback(async (analysisType = 'both') => {
    if (!canProcess()) {
      addMessage('Budget and Sales files are required for product analysis', 'error');
      return;
    }

    setProcessing(true);
    setLoading(true);
    setIntegrationSent(false);
    setSessionTotalsExtracted(false);
    
    try {
      const salesFiles = [];
      if (uploadedFiles.sales && selectedSheets.sales) {
        salesFiles.push({
          filepath: uploadedFiles.sales.filepath,
          sheet_name: selectedSheets.sales
        });
      }

      let lastYearFile = null;
      if (uploadedFiles.totalSales && selectedSheets.totalSales) {
        lastYearFile = {
          filepath: uploadedFiles.totalSales.filepath,
          sheet_name: selectedSheets.totalSales
        };
      }

      const requestData = {
        budget_filepath: uploadedFiles.budget.filepath,
        budget_sheet: selectedSheets.budget,
        sales_files: salesFiles,
        last_year_file: lastYearFile,
        analysis_type: analysisType
      };

      addMessage('Processing Product-wise analysis...', 'info');

      const response = await fetch(`${API_BASE_URL}/product/process`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(requestData)
      });

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      const result = await response.json();

      if (result.success) {
        let mtData = null;
        let valueData = null;
        let resultFiscalInfo = null;
        
        if (result.type === 'merge_analysis') {
          mtData = result.mt_data;
          valueData = result.value_data;
          resultFiscalInfo = result.fiscal_info;
        } else {
          if (analysisType === 'both' || analysisType === 'merge') {
            mtData = result.mt_data || (analysisType === 'mt' ? result : null);
            valueData = result.value_data || (analysisType === 'value' ? result : null);
          } else if (analysisType === 'mt') {
            mtData = result;
          } else if (analysisType === 'value') {
            valueData = result;
          }
          resultFiscalInfo = result.fiscal_info;
        }

        // Auto-switch to available tab (like RegionAnalysis)
        if (valueData && valueData.data && valueData.data.length > 0) {
          setActiveSubTab('value');
        } else if (mtData && mtData.data && mtData.data.length > 0) {
          setActiveSubTab('mt');
        }
        
        handleAnalysisSuccess(mtData, valueData, resultFiscalInfo);

        // Create complete analysis result including salesMonthly
        const analysisResult = {
          mtData,
          valueData,
          fiscalInfo: resultFiscalInfo,
          salesMonthly,
          timestamp: new Date().toISOString()
        };

        if (onProductDataReceived) {
          onProductDataReceived(analysisResult);
          setIntegrationSent(true);
          addMessage('Product data sent to Sales Module for ACCLLP integration', 'success');
        }
        
      } else {
        addMessage(result.error || 'Product analysis failed', 'error');
      }
    } catch (error) {
      addMessage(`Product analysis error: ${error.message}`, 'error');
    } finally {
      setLoading(false);
      setProcessing(false);
    }
  }, [canProcess, uploadedFiles, selectedSheets, addMessage, setLoading, 
      onProductDataReceived, extractSessionTotals, salesMonthly, handleAnalysisSuccess]);

  // Auto-process on data availability
  useEffect(() => {
    const timer = setTimeout(() => {
      if (canProcess() && !processing && !productData.mt && !productData.value) {
        console.log('Auto-processing Product analysis...');
        processProductAnalysis('both');
      }
    }, 1000);

    return () => clearTimeout(timer);
  }, [uploadedFiles, selectedSheets, canProcess, processProductAnalysis, processing, productData]);

  // FIXED: Connect to existing download-combined-single-sheet endpoint
  const generateProductReport = async (shouldStore = true) => {
    if (!productData.mt && !productData.value) {
      addMessage('No data available for report generation', 'error');
      return;
    }

    setLoading(true);
    try {
      console.log('Calling download-combined-single-sheet endpoint...');
      
      // Use your existing download endpoint
      const response = await fetch(`${API_BASE_URL}/product/download-combined-single-sheet`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          mt_data: productData.mt?.data || [],
          value_data: productData.value?.data || [],
          mt_columns: productData.mt?.columns || [],
          value_columns: productData.value?.columns || [],
          fiscal_year: getFiscalYearDisplay(fiscalInfo),
          include_both_tables: true
        })
      });

      console.log('Response status:', response.status);

      if (!response.ok) {
        // Try to get error message from response
        let errorMessage;
        try {
          const errorData = await response.json();
          errorMessage = errorData.error || `HTTP error! status: ${response.status}`;
        } catch (parseError) {
          errorMessage = `HTTP error! status: ${response.status}`;
        }
        throw new Error(errorMessage);
      }

      // Get the blob directly from response (since your backend uses send_file)
      const blob = await response.blob();
      console.log('File blob size:', blob.size);

      if (blob.size === 0) {
        throw new Error('Received empty file from server');
      }
      
      // Extract filename from response headers or create default
      let filename = `product_combined_report_${getFiscalYearDisplay(fiscalInfo)}_${new Date().toISOString().slice(0, 19).replace(/[:-]/g, '')}.xlsx`;
      
      // Try to get filename from Content-Disposition header
      const contentDisposition = response.headers.get('Content-Disposition');
      if (contentDisposition) {
        const filenameMatch = contentDisposition.match(/filename[^;=\n]*=((['"]).*?\2|[^;\n]*)/);
        if (filenameMatch && filenameMatch[1]) {
          filename = filenameMatch[1].replace(/['"]/g, '');
        }
      }

      console.log('Final filename:', filename);

      if (shouldStore) {
        const fileDescription = `Combined product analysis report with MT (${productData.mt?.data?.length || 0} records) and Value (${productData.value?.data?.length || 0} records) for fiscal year ${getFiscalYearDisplay(fiscalInfo)}`;
        await storeFileInSession(blob, filename, 'report', fileDescription);
      }

      // Download the file
      const url = URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = filename;
      document.body.appendChild(a);
      a.click();
      document.body.removeChild(a);
      URL.revokeObjectURL(url);

      addMessage(`Product Report ${shouldStore ? 'downloaded and stored' : 'downloaded'}: ${filename}`, 'success');
      console.log('Product report download completed successfully');
      
    } catch (error) {
      console.error('Report generation error:', error);
      addMessage(`Report generation error: ${error.message}`, 'error');
      
      // Additional debugging info
      console.error('Full error details:', {
        name: error.name,
        message: error.message,
        stack: error.stack
      });
      
    } finally {
      setLoading(false);
    }
  };

  const formatNumber = (value) => {
    if (typeof value === 'number') {
      return value.toLocaleString('en-IN', { 
        minimumFractionDigits: 2, 
        maximumFractionDigits: 2 
      });
    }
    return value;
  };

  const getProductFiles = () => {
    return storedFiles.filter(f => f.type && f.type.includes('product'));
  };

  const getRowClassName = (productName) => {
    const name = (productName || '').toString().toUpperCase();
    if (name.includes('TOTAL')) return 'total-row';
    return '';
  };

  const DataTable = ({ data, title, analysisType, showProductHighlights = true }) => {
    if (!data || !data.data) return null;

    const columns = data.columns || [];

    const productColumnNames = ['Product', 'Product Name', 'PRODUCT'];
    let productColumn = columns[0];
    
    for (const colName of productColumnNames) {
      if (columns.includes(colName)) {
        productColumn = colName;
        break;
      }
    }

    return (
      <div className="data-preview">
        <div className="preview-header">
          <h4>{title}</h4>
        </div>
        
        <div className="table-container">
          <table className="data-table">
            <thead>
              <tr>
                {columns.map((col, index) => (
                  <th key={index} className={col === productColumn ? 'product-header' : 'data-header'}>{col}</th>
                ))}
              </tr>
            </thead>
            <tbody>
              {data.data.slice(0, 100).map((row, rowIndex) => {
                const rowClass = getRowClassName(row[productColumn]);
                return (
                  <tr key={rowIndex} className={`${rowClass} ${
                    (row[productColumn] || '').toString().toUpperCase().includes('TOTAL') ? 'total-row' : ''
                  }`}>
                    {columns.map((col, colIndex) => {
                      const value = row[col];
                      const isNumeric = typeof value === 'number' && !isNaN(value);
                      const formattedValue = isNumeric ? formatNumber(value) : (value || '');
                      
                      return (
                        <td 
                          key={colIndex} 
                          className={`${col === productColumn ? 'product-cell' : 'data-cell'} ${isNumeric ? 'numeric' : ''}`}
                        >
                          {formattedValue}
                        </td>
                      );
                    })}
                  </tr>
                );
              })}
            </tbody>
          </table>
        </div>
        
        {data.data.length > 100 && (
          <div className="table-note">
            Showing first 100 rows of {data.data.length} total rows
          </div>
        )}
      </div>
    );
  };

  const AutoExportToggle = () => (
    <div className="auto-export-control">
      <label className="toggle-label">
        <input
          type="checkbox"
          checked={autoExportEnabled}
          onChange={(e) => {
            setAutoExportEnabled(e.target.checked);
            setHasAutoGenerated(false);
          }}
          className="toggle-input"
        />
        <span className="toggle-switch"></span>
        Auto-generate Excel file
      </label>
      <small className="toggle-help">
        Automatically generate combined product Excel file with both tables
      </small>
    </div>
  );

  const TablesPreviewTab = () => {
    const productFiles = getProductFiles();
    
    return (
      <div className="tables-preview-section">
        <div className="table-section">
          <div className="table-section-header">
            <h4>Product-wise SALES in Quantity</h4>
            <div className="table-status">
              {productData.mt ? (
                <span className="status-badge available">Available ({productData.mt?.data?.length || 0} products)</span>
              ) : (
                <span className="status-badge unavailable">Not Available</span>
              )}
            </div>
          </div>

          {productData.mt ? (
            <DataTable
              data={productData.mt}
              title={`Product-wise Budget and Actual Quantity (Month-wise) [${getFiscalYearDisplay(fiscalInfo)}]`}
              analysisType="mt"
            />
          ) : (
            <div className="table-empty-state">
              <h4>No Product MT Data Available</h4>
              <p>
                {!canProcess() ? 
                  "Upload Budget and Sales files to start analysis" :
                  "Click 'Refresh Analysis' to generate MT data"
                }
              </p>
            </div>
          )}
        </div>

        <div className="table-separator"></div>

        <div className="table-section">
          <div className="table-section-header">
            <h4>Product-wise SALES in Value</h4>
            <div className="table-status">
              {productData.value ? (
                <span className="status-badge available">Available ({productData.value?.data?.length || 0} products)</span>
              ) : (
                <span className="status-badge unavailable">Not Available</span>
              )}
            </div>
          </div>

          {productData.value ? (
            <DataTable
              data={productData.value}
              title={`Product-wise Budget and Actual Value (Month-wise) [${getFiscalYearDisplay(fiscalInfo)}]`}
              analysisType="value"
            />
          ) : (
            <div className="table-empty-state">
              <h4>No Product Value Data Available</h4>
              <p>
                {!canProcess() ? 
                  "Upload Budget and Sales files to start analysis" :
                  "Click 'Refresh Analysis' to generate Value data"
                }
              </p>
            </div>
          )}
        </div>

        <div className="tables-summary">
          {(productData.mt || productData.value) && (
            <div className="export-merged-section">
              <div className="export-actions">
                <button
                  onClick={() => generateProductReport(false)}
                  className="btn btn-primary btn-large"
                  disabled={loading}
                  title="Download comprehensive product analysis report"
                >
                  <Download size={16} />
                  {loading ? 'Processing...' : 'Download Product Report'}
                </button>
              </div>
            </div>
          )}
        </div>
      </div>
    );
  };

  return (
    <div className="product-analysis-section">
      <div className="section-header">
        <h1>Product-wise Analysis</h1>
        <div className="header-actions">
          <button
            onClick={() => processProductAnalysis('both')}
            className="btn btn-primary"
            disabled={!canProcess() || loading || processing}
          >
            {processing ? <RefreshCw size={16} className="spin" /> : null}
            {processing ? 'Processing...' : 'Refresh Analysis'}
          </button>

          {storedFiles.some(f => f.type && f.type.includes('product')) && (
            <div className="integration-status-badge">
              <span>Latest file stored</span>
            </div>
          )}
        </div>
      </div>

      <div className="stats-overview">
        <div className="stat-card">
          <div className="stat-content">
            <span className="stat-number">{productData.mt?.data?.length || 0}</span>
            <span className="stat-label">Product MT Records</span>
          </div>
        </div>
        <div className="stat-card">
          <div className="stat-content">
            <span className="stat-number">{productData.value?.data?.length || 0}</span>
            <span className="stat-label">Product Value Records</span>
          </div>
        </div>
        <div className="stat-card">
          <div className="stat-content">
            <span className="stat-number">
              {storedFiles.filter(f => f.type && f.type.includes('product')).length > 0 ? '1' : '0'}
            </span>
            <span className="stat-label">Stored Files</span>
          </div>
        </div>
      </div>

      <nav className="sub-tab-navigation">
        <button
          className={`sub-tab ${activeSubTab === 'mt' ? 'active' : ''}`}
          onClick={() => setActiveSubTab('mt')}
          disabled={!productData.mt && !processing}
        >
          SALES in Tonage
          {productData.mt && <span className="data-indicator"></span>}
        </button>
        <button
          className={`sub-tab ${activeSubTab === 'value' ? 'active' : ''}`}
          onClick={() => setActiveSubTab('value')}
          disabled={!productData.value && !processing}
        >
          SALES in Value
          {productData.value && <span className="data-indicator"></span>}
        </button>
        <button
          className={`sub-tab ${activeSubTab === 'tables' ? 'active' : ''}`}
          onClick={() => setActiveSubTab('tables')}
        >
          <Eye size={16} />
          Tables Preview
          {storedFiles.some(f => f.type && f.type.includes('product')) && <span className="data-indicator"></span>}
        </button>
      </nav>

      <div className="sub-tab-content">
        {activeSubTab === 'mt' && (
          <div className="mt-analysis">
            {productData.mt ? (
              <DataTable
                data={productData.mt}
                title={`Product-wise Budget and Actual Tonage (Month-wise) [${getFiscalYearDisplay(fiscalInfo)}]`}
                analysisType="mt"
              />
            ) : (
              <div className="empty-state">
                <h3>No MT analysis data</h3>
                <p>
                  {!canProcess() ? 
                    "Upload Budget and Sales files to start analysis" :
                    "Click 'Refresh Analysis' to generate MT data"
                  }
                </p>
                {canProcess() && (
                  <button
                    onClick={() => processProductAnalysis('mt')}
                    className="btn btn-primary"
                    disabled={loading || processing}
                  >
                    Generate MT Analysis
                  </button>
                )}
              </div>
            )}
          </div>
        )}

        {activeSubTab === 'value' && (
          <div className="value-analysis">
            {productData.value ? (
              <DataTable
                data={productData.value}
                title={`Product-wise Budget and Actual Value (Month-wise) [${getFiscalYearDisplay(fiscalInfo)}]`}
                analysisType="value"
              />
            ) : (
              <div className="empty-state">
                <h3>No Value analysis data</h3>
                <p>
                  {!canProcess() ? 
                    "Upload Budget and Sales files to start analysis" :
                    "Click 'Refresh Analysis' to generate Value data"
                  }
                </p>
                {canProcess() && (
                  <button
                    onClick={() => processProductAnalysis('value')}
                    className="btn btn-primary"
                    disabled={loading || processing}
                  >
                    Generate Value Analysis
                  </button>
                )}
              </div>
            )}
          </div>
        )}

        {activeSubTab === 'tables' && <TablesPreviewTab />}
      </div>

      {processing && (
        <div className="processing-indicator">
          <RefreshCw size={24} className="spin" />
          <span>Processing Product-wise analysis...</span>
        </div>
      )}

      <style jsx>{`
        .product-analysis-section {
          padding: 32px;
          font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen', 'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue', sans-serif;
          background-color: #f8fafc;
          min-height: 100vh;
        }

        .section-header {
          display: flex;
          justify-content: space-between;
          align-items: center;
          margin-bottom: 32px;
          background: white;
          padding: 16px 24px;
          border-radius: 8px;
          box-shadow: 0 1px 3px rgba(0,0,0,0.12), 0 1px 2px rgba(0,0,0,0.24);
        }

        .section-header h1 {
          margin: 0;
          color: #1e293b;
          font-size: 24px;
          font-weight: 700;
          letter-spacing: -0.025em;
        }

        .header-actions {
          display: flex;
          gap: 16px;
          align-items: center;
        }

        .integration-status-badge {
          display: none;
        }

        .stats-overview {
          display: grid;
          grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
          gap: 16px;
          margin-bottom: 32px;
        }

        .stat-card {
          background: white;
          padding: 16px 20px;
          border-radius: 8px;
          box-shadow: 0 1px 3px rgba(0,0,0,0.12), 0 1px 2px rgba(0,0,0,0.24);
          transition: all 0.3s ease;
          border-left: 3px solid #3b82f6;
        }

        .stat-card:hover {
          transform: translateY(-1px);
          box-shadow: 0 4px 6px rgba(0,0,0,0.12), 0 2px 4px rgba(0,0,0,0.06);
        }

        .stat-content {
          display: flex;
          flex-direction: column;
          gap: 4px;
        }

        .stat-number {
          font-size: 24px;
          font-weight: 700;
          color: #1e293b;
          line-height: 1;
        }

        .stat-label {
          font-size: 12px;
          color: #64748b;
          text-transform: uppercase;
          letter-spacing: 0.05em;
          font-weight: 600;
        }

        .sub-tab-navigation {
          display: flex;
          background: white;
          border-radius: 12px;
          box-shadow: 0 1px 3px rgba(0,0,0,0.12), 0 1px 2px rgba(0,0,0,0.24);
          overflow: hidden;
          margin-bottom: 32px;
        }

        .sub-tab {
          display: flex;
          align-items: center;
          gap: 12px;
          padding: 20px 32px;
          background: none;
          border: none;
          border-bottom: 3px solid transparent;
          cursor: pointer;
          font-size: 16px;
          font-weight: 600;
          color: #64748b;
          transition: all 0.3s ease;
          flex: 1;
          justify-content: center;
          position: relative;
        }

        .sub-tab:hover:not(:disabled) {
          color: #1e293b;
          background: #f8fafc;
        }

        .sub-tab.active {
          color: #3b82f6;
          border-bottom-color: #3b82f6;
          background: white;
        }

        .sub-tab:disabled {
          opacity: 0.5;
          cursor: not-allowed;
        }

        .data-indicator {
          width: 8px;
          height: 8px;
          background: #10b981;
          border-radius: 50%;
          animation: pulse 2s infinite;
        }

        @keyframes pulse {
          0%, 100% { opacity: 1; }
          50% { opacity: 0.5; }
        }

        .sub-tab-content {
          min-height: 400px;
        }

        .auto-export-control {
          margin-top: 32px;
          padding: 24px;
          background: white;
          border-radius: 12px;
          box-shadow: 0 1px 3px rgba(0,0,0,0.12), 0 1px 2px rgba(0,0,0,0.24);
        }

        .toggle-label {
          display: flex;
          align-items: center;
          gap: 16px;
          cursor: pointer;
          font-size: 16px;
          font-weight: 600;
          color: #1e293b;
        }

        .toggle-input {
          display: none;
        }

        .toggle-switch {
          position: relative;
          width: 52px;
          height: 28px;
          background: #cbd5e1;
          border-radius: 14px;
          transition: background 0.3s ease;
        }

        .toggle-switch::before {
          content: '';
          position: absolute;
          top: 2px;
          left: 2px;
          width: 24px;
          height: 24px;
          background: white;
          border-radius: 50%;
          transition: transform 0.3s ease;
          box-shadow: 0 2px 4px rgba(0,0,0,0.2);
        }

        .toggle-input:checked + .toggle-switch {
          background: #3b82f6;
        }

        .toggle-input:checked + .toggle-switch::before {
          transform: translateX(24px);
        }

        .toggle-help {
          display: block;
          margin-top: 12px;
          color: #64748b;
          font-size: 14px;
          font-weight: 400;
          line-height: 1.5;
        }

        .tables-preview-section {
          padding: 0;
        }

        .table-section {
          margin-bottom: 32px;
          border: 1px solid #e2e8f0;
          border-radius: 12px;
          overflow: hidden;
          background: white;
          box-shadow: 0 1px 3px rgba(0,0,0,0.12), 0 1px 2px rgba(0,0,0,0.24);
        }

        .table-section-header {
          display: flex;
          justify-content: space-between;
          align-items: center;
          padding: 24px 32px;
          background: #f8fafc;
          border-bottom: 1px solid #e2e8f0;
        }

        .table-section-header h4 {
          margin: 0;
          color: #1e293b;
          font-size: 20px;
          font-weight: 700;
        }

        .table-status {
          display: flex;
          align-items: center;
        }

        .status-badge {
          padding: 8px 16px;
          border-radius: 20px;
          font-size: 14px;
          font-weight: 600;
          border: 1px solid;
        }

        .status-badge.available {
          background: #d1fae5;
          color: #065f46;
          border-color: #a7f3d0;
        }

        .status-badge.unavailable {
          background: #fee2e2;
          color: #991b1b;
          border-color: #fecaca;
        }

        .table-empty-state {
          text-align: center;
          padding: 80px 32px;
          color: #64748b;
        }

        .table-empty-state h4 {
          margin: 0 0 16px;
          color: #1e293b;
          font-size: 24px;
          font-weight: 700;
        }

        .table-empty-state p {
          color: #64748b;
          max-width: 500px;
          margin: 0 auto 24px;
          line-height: 1.6;
          font-size: 16px;
        }

        .table-separator {
          height: 24px;
        }

        .tables-summary {
          background: white;
          border: 1px solid #e2e8f0;
          border-radius: 12px;
          padding: 32px;
          margin-top: 32px;
          box-shadow: 0 1px 3px rgba(0,0,0,0.12), 0 1px 2px rgba(0,0,0,0.24);
        }

        .export-merged-section {
          padding: 24px;
          background: #f8fafc;
          border: 2px dashed #3b82f6;
          border-radius: 12px;
          text-align: center;
        }

        .export-actions {
          display: flex;
          gap: 16px;
          justify-content: center;
          flex-wrap: wrap;
        }

        .empty-state {
          display: flex;
          flex-direction: column;
          align-items: center;
          justify-content: center;
          padding: 80px 32px;
          text-align: center;
          background: white;
          border-radius: 12px;
          box-shadow: 0 1px 3px rgba(0,0,0,0.12), 0 1px 2px rgba(0,0,0,0.24);
        }

        .empty-state h3 {
          margin: 0 0 16px;
          font-size: 24px;
          color: #1e293b;
          font-weight: 700;
        }

        .empty-state p {
          margin: 0 0 24px;
          font-size: 16px;
          color: #64748b;
          max-width: 400px;
          line-height: 1.6;
        }

        .data-preview {
          background: white;
          border-radius: 0;
          overflow: hidden;
        }

        .preview-header {
          display: flex;
          justify-content: space-between;
          align-items: center;
          padding: 24px 32px;
          background: #f8fafc;
          border-bottom: 1px solid #e2e8f0;
        }

        .preview-header h4 {
          margin: 0;
          font-size: 18px;
          font-weight: 700;
          color: #1e293b;
        }

        .table-container {
          overflow-x: auto;
          max-height: 600px;
          overflow-y: auto;
        }

        .data-table {
          width: 100%;
          border-collapse: collapse;
          font-size: 14px;
        }

        .data-table th {
          background: #f8fafc;
          color: #374151;
          padding: 16px 12px;
          text-align: left;
          font-weight: 700;
          position: sticky;
          top: 0;
          z-index: 10;
          border-bottom: 2px solid #e2e8f0;
          border-right: 1px solid #e2e8f0;
        }

        .product-header {
          background: #1e40af !important;
          color: white !important;
          min-width: 200px;
          position: sticky;
          left: 0;
          z-index: 11;
        }

        .data-header {
          text-align: center !important;
          min-width: 100px;
        }

        .data-table td {
          padding: 12px;
          border-bottom: 1px solid #f1f5f9;
          border-right: 1px solid #f1f5f9;
          white-space: nowrap;
        }

        .product-cell {
          font-weight: 600;
          color: #1e293b;
          background: #f8fafc;
          position: sticky;
          left: 0;
          z-index: 5;
          border-right: 2px solid #1e40af;
          min-width: 200px;
        }

        .data-cell {
          font-family: 'SF Mono', 'Monaco', 'Inconsolata', 'Roboto Mono', monospace;
          font-size: 14px;
          text-align: right;
        }

        .data-cell.numeric {
          text-align: right;
        }

        .total-row {
          background: #dcfce7 !important;
          font-weight: 600;
        }

        .total-row .product-cell {
          background: #22c55e !important;
          color: white !important;
          font-weight: 800;
        }

        .data-table tr:hover {
          background: #f8fafc;
        }

        .data-table tr:hover .product-cell {
          background: #e2e8f0;
        }

        .data-table tr.total-row:hover .product-cell {
          opacity: 0.9;
        }

        .table-note {
          padding: 16px 32px;
          background: #f8fafc;
          border-top: 1px solid #e2e8f0;
          font-size: 14px;
          color: #64748b;
          text-align: center;
        }

        .processing-indicator {
          display: flex;
          align-items: center;
          justify-content: center;
          gap: 12px;
          padding: 48px;
          color: #64748b;
          background: white;
          border-radius: 12px;
          margin: 32px 0;
          box-shadow: 0 1px 3px rgba(0,0,0,0.12), 0 1px 2px rgba(0,0,0,0.24);
          font-size: 16px;
          font-weight: 600;
        }

        .btn {
          display: inline-flex;
          align-items: center;
          gap: 12px;
          padding: 12px 24px;
          border: none;
          border-radius: 8px;
          font-size: 16px;
          font-weight: 600;
          cursor: pointer;
          transition: all 0.3s ease;
          text-decoration: none;
          font-family: inherit;
        }

        .btn:disabled {
          opacity: 0.6;
          cursor: not-allowed;
          transform: none !important;
        }

        .btn-primary {
          background: #3b82f6;
          color: white;
          box-shadow: 0 4px 6px rgba(59, 130, 246, 0.25);
        }

        .btn-primary:hover:not(:disabled) {
          background: #2563eb;
          transform: translateY(-1px);
          box-shadow: 0 6px 8px rgba(59, 130, 246, 0.3);
        }

        .btn-large {
          padding: 16px 32px;
          font-size: 18px;
          font-weight: 700;
        }

        @keyframes spin {
          from { transform: rotate(0deg); }
          to { transform: rotate(360deg); }
        }

        .spin {
          animation: spin 1s linear infinite;
        }

        @media (max-width: 1024px) {
          .product-analysis-section {
            padding: 24px;
          }

          .export-actions {
            flex-direction: column;
            align-items: stretch;
          }
        }

        @media (max-width: 768px) {
          .product-analysis-section {
            padding: 16px;
          }

          .section-header {
            flex-direction: column;
            gap: 20px;
            align-items: stretch;
            text-align: center;
            padding: 12px 16px;
          }

          .section-header h1 {
            font-size: 20px;
          }

          .stats-overview {
            grid-template-columns: 1fr;
          }

          .sub-tab-navigation {
            flex-direction: column;
          }

          .sub-tab {
            justify-content: center;
            padding: 16px 24px;
          }

          .table-section-header {
            flex-direction: column;
            gap: 16px;
            align-items: stretch;
            text-align: center;
            padding: 20px;
          }

          .export-actions {
            flex-direction: column;
            align-items: stretch;
          }

          .data-table th.product-header,
          .data-table td.product-cell {
            min-width: 150px;
          }

          .toggle-label {
            flex-direction: column;
            align-items: flex-start;
            gap: 12px;
          }
        }

        @media (max-width: 480px) {
          .product-analysis-section {
            padding: 12px;
          }

          .section-header {
            padding: 10px 12px;
          }

          .section-header h1 {
            font-size: 18px;
          }

          .stat-card {
            padding: 24px;
          }

          .stat-number {
            font-size: 32px;
          }

          .sub-tab {
            padding: 14px 20px;
            font-size: 14px;
          }

          .auto-export-control {
            padding: 20px;
          }

          .tables-summary {
            padding: 20px;
          }

          .data-table {
            font-size: 13px;
          }

          .data-table th,
          .data-table td {
            padding: 10px 8px;
          }

          .btn {
            padding: 10px 20px;
            font-size: 14px;
          }

          .btn-large {
            padding: 14px 28px;
            font-size: 16px;
          }

          .export-merged-section {
            padding: 20px;
          }
        }
      `}</style>
    </div>
  );
};

export default ProductAnalysis;
