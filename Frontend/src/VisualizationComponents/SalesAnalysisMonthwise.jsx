import React, { useState, useEffect, useCallback } from 'react';
import { 
  FileSpreadsheet, 
  Download, 
  AlertCircle, 
  CheckCircle, 
  Info, 
  RefreshCw,
  Database,
  Save,
  FileCheck,
  Package,
  TrendingUp
} from 'lucide-react';

const API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';

const SalesAnalysisMonthwise = ({ 
  uploadedFiles, 
  selectedSheets, 
  addMessage, 
  loading, 
  setLoading,
  sessionTotals = null,
  setSessionTotals = null,
  // File storage props - only using global storage now
  storedFiles = [],
  setStoredFiles = null,
  onFileAdd = null,
  onFileRemove = null
}) => {
  const [salesMtData, setSalesMtData] = useState(null);
  const [salesValueData, setSalesValueData] = useState(null);
  const [processing, setProcessing] = useState(false);
  const [hasCheckedSession, setHasCheckedSession] = useState(false);
  
  // Auto-export state (no toggle, always enabled)
  const autoExportEnabled = true;

  // Session storage management
  const saveToSessionStorage = (key, data) => {
    try {
      sessionStorage.setItem(key, JSON.stringify(data));
    } catch (error) {
      console.warn('Failed to save to session storage:', error);
    }
  };

  const loadFromSessionStorage = (key) => {
    try {
      const data = sessionStorage.getItem(key);
      return data ? JSON.parse(data) : null;
    } catch (error) {
      console.warn('Failed to load from session storage:', error);
      return null;
    }
  };

  // Load data from session storage on component mount
  useEffect(() => {
    const savedSalesMtData = loadFromSessionStorage('salesMtData');
    const savedSalesValueData = loadFromSessionStorage('salesValueData');
    
    if (savedSalesMtData) {
      setSalesMtData(savedSalesMtData);
    }
    if (savedSalesValueData) {
      setSalesValueData(savedSalesValueData);
    }
  }, []);

  // Save data to session storage whenever data changes
  useEffect(() => {
    if (salesMtData) {
      saveToSessionStorage('salesMtData', salesMtData);
    }
  }, [salesMtData]);

  useEffect(() => {
    if (salesValueData) {
      saveToSessionStorage('salesValueData', salesValueData);
    }
  }, [salesValueData]);

  // Store file in global storage - KEEP ONLY LATEST FILE
  const storeFileInSession = useCallback(async (fileBlob, fileName, fileDescription) => {
    try {
      const timestamp = new Date().toISOString();
      const fileUrl = URL.createObjectURL(fileBlob);
      
      const storedFileData = {
        id: `sales_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
        name: fileName,
        blob: fileBlob,
        size: fileBlob.size,
        url: fileUrl,
        createdAt: timestamp,
        type: 'sales-analysis-excel',
        source: 'Sales Analysis Monthwise',
        description: fileDescription,
        metadata: {
          mtRows: salesMtData?.data?.length || 0,
          valueRows: salesValueData?.data?.length || 0,
          hasSessionTotals: !!sessionTotals,
          auditorFile: uploadedFiles.auditor?.filename,
          auditorSheet: selectedSheets.auditor,
          autoGenerated: true,
          columnOrdered: true
        },
        tags: ['sales', 'monthwise', 'analysis', 'excel']
      };

      console.log('🔄 Storing Sales Analysis file (replacing previous):', {
        fileName,
        fileSize: fileBlob.size
      });

      // FIRST: Remove any existing Sales Analysis files to keep only the latest
      if (typeof setStoredFiles === 'function') {
        setStoredFiles(prev => {
          // Remove old Sales Analysis files and clean up their URLs
          const oldSalesFiles = prev.filter(f => f.type === 'sales-analysis-excel');
          oldSalesFiles.forEach(file => {
            if (file.url) {
              URL.revokeObjectURL(file.url);
            }
          });
          
          // Keep only non-sales files and add the new one
          const otherFiles = prev.filter(f => f.type !== 'sales-analysis-excel');
          return [storedFileData, ...otherFiles];
        });
        
        console.log('✅ Sales Analysis file replaced (keeping only latest)');
        addMessage(`💾 ${fileName} stored (previous Sales Analysis file replaced)`, 'success');
        return storedFileData;
      }
      
      // Fallback: try onFileAdd if setStoredFiles not available
      if (typeof onFileAdd === 'function') {
        onFileAdd(storedFileData);
        console.log('✅ Sales Analysis file added via onFileAdd callback');
        addMessage(`💾 ${fileName} stored in Combined Excel Manager`, 'success');
        return storedFileData;
      }

      addMessage('⚠️ File generated but could not be stored', 'warning');
      return null;
    } catch (error) {
      console.error('❌ Error storing Sales Analysis file:', error);
      addMessage(`❌ Error storing file: ${error.message}`, 'error');
      return null;
    }
  }, [salesMtData, salesValueData, sessionTotals, uploadedFiles, selectedSheets, addMessage, onFileAdd, setStoredFiles]);

  // Auto-generate Excel file
  const autoGenerateSalesReport = useCallback(async () => {
    if (!salesMtData && !salesValueData) return;

    console.log('🤖 Auto-generating Sales Analysis Excel file...');

    try {
      const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
      const fileName = `sales_analysis_auto_${timestamp}.xlsx`;

      // Ensure columns are ordered before sending to backend
      const orderedMtData = orderColumns(salesMtData);
      const orderedValueData = orderColumns(salesValueData);

      const response = await fetch(`${API_BASE_URL}/download-sales-monthwise-excel`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          sales_mt_data: orderedMtData,
          sales_value_data: orderedValueData,
          auto_generated: true
        })
      });

      if (response.ok) {
        const blob = await response.blob();
        
        const fileDescription = `Auto-generated Sales Analysis with MT (${orderedMtData?.data?.length || 0} records) and Value (${orderedValueData?.data?.length || 0} records) with session totals integration`;
        await storeFileInSession(blob, fileName, fileDescription);
        
        addMessage(`🤖 Auto-generated: ${fileName}`, 'success');
        return { success: true, fileName };
      } else {
        const errorData = await response.json();
        throw new Error(errorData.error || 'Failed to generate Excel file');
      }
    } catch (error) {
      console.error('❌ Auto-generation error:', error);
      addMessage(`❌ Auto-generation error: ${error.message}`, 'error');
    }
  }, [salesMtData, salesValueData, storeFileInSession, addMessage]);

  // Auto-generate report when data is available (always enabled)
  useEffect(() => {
    if ((salesMtData || salesValueData) && sessionTotals) {
      const timer = setTimeout(() => {
        autoGenerateSalesReport();
      }, 2000); // 2 second delay after processing completes
      
      return () => clearTimeout(timer);
    }
  }, [salesMtData, salesValueData, sessionTotals, autoGenerateSalesReport]);

  // Auto-process when tab is opened and requirements are met
  useEffect(() => {
    const autoProcess = async () => {
      if (uploadedFiles.auditor && 
          selectedSheets.auditor && 
          sessionTotals && 
          !hasCheckedSession && 
          !processing) {
        
        setHasCheckedSession(true);
        await processSalesAnalysisWithSession();
      }
    };

    autoProcess();
  }, [uploadedFiles.auditor, selectedSheets.auditor, sessionTotals, hasCheckedSession, processing]); // eslint-disable-line react-hooks/exhaustive-deps

  // Process the sales analysis data using session totals
  const processSalesAnalysisWithSession = async () => {
    if (!uploadedFiles.auditor) {
      addMessage('Please upload an auditor file first', 'error');
      return;
    }

    if (!selectedSheets.auditor) {
      addMessage('Please select an auditor sheet first', 'error');
      return;
    }

    if (!sessionTotals) {
      addMessage('Session totals required. Please run Product Analysis first.', 'error');
      return;
    }

    setProcessing(true);
    setLoading(true);

    try {
      addMessage('Processing Sales Analysis with session totals...', 'info');

      const response = await fetch(`${API_BASE_URL}/process-sales-monthwise-with-session`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          filepath: uploadedFiles.auditor.filepath,
          sheet_name: selectedSheets.auditor,
          session_totals: sessionTotals
        })
      });

      const result = await response.json();

      if (result.success) {
        // Ensure columns are in the correct order
        const orderedMtData = orderColumns(result.sales_mt_table);
        const orderedValueData = orderColumns(result.sales_value_table);
        
        setSalesMtData(orderedMtData);
        setSalesValueData(orderedValueData);
        addMessage('✅ Sales Analysis processed with session totals integrated into ACCLLP rows!', 'success');
      } else {
        addMessage(result.error || 'Failed to process sales analysis data', 'error');
        setSalesMtData(null);
        setSalesValueData(null);
      }
    } catch (error) {
      addMessage(`Error processing sales analysis: ${error.message}`, 'error');
      setSalesMtData(null);
      setSalesValueData(null);
    } finally {
      setProcessing(false);
      setLoading(false);
    }
  };

  // Helper function to order columns consistently
  const orderColumns = (tableData) => {
    if (!tableData || !tableData.columns || !tableData.data) return tableData;
    
    // Define the desired column order (adjust as needed)
    const desiredOrder = [
      'Product', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 
      'Oct', 'Nov', 'Dec', 'Jan', 'Feb', 'Mar', 'YTD'
    ];
    
    // Filter and order columns based on desired order
    const orderedColumns = desiredOrder.filter(col => 
      tableData.columns.includes(col)
    );
    
    // Add any remaining columns not in the desired order
    const remainingColumns = tableData.columns.filter(col => 
      !desiredOrder.includes(col)
    );
    
    const finalColumns = [...orderedColumns, ...remainingColumns];
    
    // Reorder the data rows
    const orderedData = tableData.data.map(row => {
      const newRow = {};
      finalColumns.forEach(col => {
        if (row.hasOwnProperty(col)) {
          newRow[col] = row[col];
        }
      });
      return newRow;
    });
    
    return {
      ...tableData,
      columns: finalColumns,
      data: orderedData
    };
  };

  // Format number for display using Indian locale (TS-PW style)
  const formatNumber = (value) => {
    if (typeof value === 'number') {
      return value.toLocaleString('en-IN', { 
        minimumFractionDigits: 2, 
        maximumFractionDigits: 2 
      });
    }
    if (value === "" || value === null || value === undefined || value === 0) return "";
    const num = parseFloat(value);
    if (isNaN(num)) return value;
    return num.toLocaleString('en-IN', { minimumFractionDigits: 2, maximumFractionDigits: 2 });
  };

  // Download and store Excel file (updated with TS-PW style export pattern)
  const downloadAndStoreExcel = async (shouldStore = true) => {
    if (!salesMtData && !salesValueData) {
      addMessage('No data available to export', 'error');
      return;
    }

    console.log('📤 Exporting Sales Analysis tables');
    setLoading(true);

    try {
      // Ensure columns are ordered before sending to backend
      const orderedMtData = orderColumns(salesMtData);
      const orderedValueData = orderColumns(salesValueData);

      const timestamp = new Date().toISOString().slice(0, 19).replace(/[:-]/g, '');
      const fileName = shouldStore ? 
        `sales_analysis_manual_${timestamp}.xlsx` :
        `sales_analysis_download_${timestamp}.xlsx`;

      const response = await fetch(`${API_BASE_URL}/download-sales-monthwise-excel`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          sales_mt_data: orderedMtData,
          sales_value_data: orderedValueData
        })
      });

      if (!response.ok) {
        const errorText = await response.text();
        throw new Error(`HTTP error! status: ${response.status}, message: ${errorText}`);
      }

      const blob = await response.blob();
      
      // Store in global storage if requested
      if (shouldStore) {
        const fileDescription = `Manual Sales Analysis with MT (${orderedMtData?.data?.length || 0} records) and Value (${orderedValueData?.data?.length || 0} records) with session totals integration`;
        await storeFileInSession(blob, fileName, fileDescription);
      }
      
      // Also trigger immediate download
      const url = window.URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = fileName;
      document.body.appendChild(a);
      a.click();
      window.URL.revokeObjectURL(url);
      document.body.removeChild(a);
      
      addMessage(`✅ Sales analysis exported successfully: ${fileName}`, 'success');
    } catch (error) {
      addMessage(`❌ Export error: ${error.message}`, 'error');
    } finally {
      setLoading(false);
    }
  };

  // Clear session data
  const clearSessionData = () => {
    try {
      sessionStorage.removeItem('salesMtData');
      sessionStorage.removeItem('salesValueData');
      setSalesMtData(null);
      setSalesValueData(null);
      addMessage('Session data cleared successfully', 'info');
    } catch (error) {
      addMessage('Failed to clear session data', 'error');
    }
  };

  // Get Sales Analysis specific files from global storage
  const salesAnalysisFiles = storedFiles.filter(f => f.type === 'sales-analysis-excel');

  // Check requirements
  const hasAuditorFile = uploadedFiles.auditor;
  const hasAuditorSheet = selectedSheets.auditor;
  const hasSessionData = sessionTotals && Object.keys(sessionTotals).length > 0;
  const canProcess = hasAuditorFile && hasAuditorSheet && hasSessionData;

  // Data table component (TS-PW style)
  const DataTable = ({ data, title, tableType }) => {
    if (!data || !data.data || data.data.length === 0) {
      return (
        <div className="table-empty-state">
          <AlertCircle size={48} />
          <h4>No {title} Data Available</h4>
          <p>
            {!canProcess ? 
              "Upload auditor file and ensure session totals are available to start analysis" :
              "Click 'Refresh Analysis' to generate data"
            }
          </p>
        </div>
      );
    }

    const columns = data.columns || [];
    const firstCol = columns[0];

    return (
      <div className="data-preview">
        <div className="preview-header">
          <h4>{title}</h4>
          <div className="table-info">
            <span>Shape: {data.shape[0]} rows × {data.shape[1]} columns</span>
          </div>
        </div>
        
        <div className="table-container">
          <table className="data-table">
            <thead>
              <tr>
                {columns.map((col, index) => (
                  <th 
                    key={index} 
                    className={index === 0 ? 'sticky-col product-header' : 'data-header'}
                    title={col}
                  >
                    {col.includes('YTD') ? col : (col.length > 15 ? `${col.substring(0, 15)}...` : col)}
                  </th>
                ))}
              </tr>
            </thead>
            <tbody>
              {data.data.slice(0, 100).map((row, rowIndex) => {
                const isAccllp = String(row[firstCol]).toUpperCase() === 'ACCLLP' || 
                                String(row[firstCol]).toUpperCase() === 'TOTAL SALES';
                const isTotal = String(row[firstCol]).toUpperCase().includes('TOTAL');
                
                return (
                  <tr key={rowIndex} className={isTotal || isAccllp ? 'total-row' : ''}>
                    {columns.map((col, colIndex) => {
                      const value = row[col];
                      const isNumeric = typeof value === 'number' && !isNaN(value);
                      const formattedValue = isNumeric ? formatNumber(value) : (value || '');
                      
                      return (
                        <td 
                          key={colIndex} 
                          className={`${colIndex === 0 ? 'sticky-col product-cell' : 'data-cell'} ${isNumeric ? 'numeric' : ''}`}
                        >
                          {formattedValue}
                        </td>
                      );
                    })}
                  </tr>
                );
              })}
            </tbody>
          </table>
        </div>
        
        {data.data.length > 100 && (
          <div className="table-note">
            Showing first 100 rows of {data.data.length} total rows
          </div>
        )}
      </div>
    );
  };

  return (
    <div className="sales-analysis-section">
      <div className="section-header">
        <h2>Sales Analysis Month-wise</h2>
        <div className="header-actions">
          <button
            onClick={processSalesAnalysisWithSession}
            className="btn btn-primary"
            disabled={!canProcess || loading || processing}
          >
            {processing ? <RefreshCw size={16} /> : <Database size={16} />}
            {processing ? 'Processing...' : 'Refresh Analysis'}
          </button>

          {/* Combined Data Integration Status */}
          {salesAnalysisFiles.length > 0 && (
            <div className="integration-status-badge">
              <Package size={14} />
              <span>Latest file stored</span>
              <span className="latest-indicator">Latest Only</span>
            </div>
          )}
        </div>
      </div>

      <div className="stats-overview">
        <div className="stat-card">
          <Package className="stat-icon" />
          <div>
            <span className="stat-number">{salesMtData?.shape?.[0] || 0}</span>
            <span className="stat-label">MT Records</span>
          </div>
        </div>
        <div className="stat-card">
          <TrendingUp className="stat-icon" />
          <div>
            <span className="stat-number">{salesValueData?.shape?.[0] || 0}</span>
            <span className="stat-label">Value Records</span>
          </div>
        </div>
        <div className="stat-card">
          <Database className="stat-icon" />
          <div>
            <span className="stat-number">
              {salesAnalysisFiles.length > 0 ? '1' : '0'}
            </span>
            <span className="stat-label">Latest File</span>
          </div>
        </div>
      </div>

      {/* Action Buttons */}
      {canProcess && (salesMtData || salesValueData) && (
        <div className="export-merged-section">
          <div className="export-actions">
            <button
              onClick={() => downloadAndStoreExcel(true)}
              className="btn btn-primary btn-large"
              disabled={loading}
              title="Generate, download and store in Combined Data Manager"
            >
              <Save size={16} />
              {loading ? 'Processing...' : 'Generate & Store Excel File'}
            </button>
            
            <button
              onClick={() => downloadAndStoreExcel(false)}
              className="btn btn-secondary"
              disabled={loading}
              title="Download only (don't store)"
            >
              <Download size={16} />
              Download Only
            </button>
          </div>
        </div>
      )}

      {/* Data Tables */}
      <div className="tables-section">
        <div className="table-section">
          <div className="table-section-header">
            <h4> SALES in MT</h4>
            <div className="table-status">
              {salesMtData ? (
                <span className="status-badge available">✅ Available ({salesMtData.shape[0]} records)</span>
              ) : (
                <span className="status-badge unavailable">❌ Not Available</span>
              )}
            </div>
          </div>

          {salesMtData ? (
            <DataTable
              data={salesMtData}
              title="SALES in MT"
              tableType="MT"
            />
          ) : (
            <div className="table-empty-state">
              <Package size={48} />
              <h4>No MT Data Available</h4>
              <p>
                {!canProcess ? 
                  "Upload auditor file and ensure session totals are available" :
                  "Click 'Refresh Analysis' to generate MT data"
                }
              </p>
            </div>
          )}
        </div>

        <div className="table-separator"></div>

        <div className="table-section">
          <div className="table-section-header">
            <h4> SALES in Value</h4>
            <div className="table-status">
              {salesValueData ? (
                <span className="status-badge available">✅ Available ({salesValueData.shape[0]} records)</span>
              ) : (
                <span className="status-badge unavailable">❌ Not Available</span>
              )}
            </div>
          </div>

          {salesValueData ? (
            <DataTable
              data={salesValueData}
              title="SALES in Value"
              tableType="Value"
            />
          ) : (
            <div className="table-empty-state">
              <TrendingUp size={48} />
              <h4>No Value Data Available</h4>
              <p>
                {!canProcess ? 
                  "Upload auditor file and ensure session totals are available" :
                  "Click 'Refresh Analysis' to generate Value data"
                }
              </p>
            </div>
          )}
        </div>
      </div>

      {/* Loading/Empty States */}
      {!canProcess && (
        <div className="empty-state">
          <FileSpreadsheet size={48} />
          <h3>
            {!hasSessionData ? 'Session Totals Required' : 'Ready to Process'}
          </h3>
          <p>
            {!hasSessionData 
              ? 'Please run Product Analysis first to generate session totals, then return to this tab.'
              : 'Upload auditor file and select sheet to automatically process sales analysis.'}
          </p>
        </div>
      )}

      {processing && (
        <div className="processing-indicator">
          <RefreshCw size={24} />
          <span>Processing Sales Analysis with session totals...</span>
        </div>
      )}

      {/* Integration Help */}
      {(!onFileAdd || !setStoredFiles) && (
        <div className="integration-warning">
          <div className="warning-header">
            <AlertCircle size={16} />
            Limited Storage Integration
          </div>
          <div className="warning-text">
            Some storage functions are not available. Files can still be generated and downloaded, 
            but automatic storage in Combined Data Manager may be limited.
          </div>
        </div>
      )}

      <style jsx>{`
        .sales-analysis-section {
          padding: 20px;
          font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen', 'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue', sans-serif;
          background-color: #f8f9fa;
          min-height: 100vh;
        }

        .section-header {
          display: flex;
          justify-content: space-between;
          align-items: center;
          margin-bottom: 20px;
          background: white;
          padding: 20px;
          border-radius: 8px;
          box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }

        .section-header h2 {
          margin: 0;
          color: #333;
          font-size: 24px;
          font-weight: 600;
        }

        .header-actions {
          display: flex;
          gap: 10px;
          align-items: center;
        }

        .integration-status-badge {
          display: flex;
          align-items: center;
          gap: 6px;
          background: linear-gradient(135deg, #28a745, #20c997);
          color: white;
          padding: 8px 12px;
          border-radius: 16px;
          font-size: 12px;
          font-weight: 500;
          animation: pulse 2s infinite;
          position: relative;
        }

        .latest-indicator {
          background: rgba(255, 255, 255, 0.2);
          padding: 2px 6px;
          border-radius: 8px;
          font-size: 10px;
          margin-left: 4px;
        }

        @keyframes pulse {
          0% { transform: scale(1); }
          50% { transform: scale(1.05); }
          100% { transform: scale(1); }
        }

        .stats-overview {
          display: grid;
          grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
          gap: 15px;
          margin-bottom: 20px;
        }

        .stat-card {
          background: white;
          padding: 20px;
          border-radius: 8px;
          box-shadow: 0 2px 4px rgba(0,0,0,0.1);
          display: flex;
          align-items: center;
          gap: 15px;
          transition: transform 0.2s, box-shadow 0.2s;
        }

        .stat-card:hover {
          transform: translateY(-2px);
          box-shadow: 0 4px 8px rgba(0,0,0,0.15);
        }

        .stat-icon {
          width: 40px;
          height: 40px;
          color: #667eea;
          flex-shrink: 0;
        }

        .stat-number {
          display: block;
          font-size: 24px;
          font-weight: bold;
          color: #333;
          line-height: 1.2;
        }

        .stat-label {
          display: block;
          font-size: 12px;
          color: #666;
          text-transform: uppercase;
          letter-spacing: 0.5px;
        }

        .tables-section {
          display: flex;
          flex-direction: column;
          gap: 32px;
        }

        .table-section {
          margin-bottom: 32px;
          border: 1px solid #e0e0e0;
          border-radius: 12px;
          overflow: hidden;
          background: white;
          box-shadow: 0 2px 8px rgba(0,0,0,0.1);
        }

        .table-section-header {
          display: flex;
          justify-content: space-between;
          align-items: center;
          padding: 20px 24px;
          background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
          border-bottom: 1px solid #e0e0e0;
        }

        .table-section-header h4 {
          margin: 0;
          color: #333;
          font-size: 18px;
          font-weight: 600;
        }

        .table-status {
          display: flex;
          align-items: center;
        }

        .status-badge {
          padding: 6px 12px;
          border-radius: 16px;
          font-size: 12px;
          font-weight: 600;
          border: 1px solid;
        }

        .status-badge.available {
          background: #d4edda;
          color: #155724;
          border-color: #c3e6cb;
        }

        .status-badge.unavailable {
          background: #f8d7da;
          color: #721c24;
          border-color: #f5c6cb;
        }

        .table-separator {
          height: 24px;
        }

        .export-merged-section {
          margin: 25px 0;
          padding: 20px;
          background: white;
          border: 2px dashed #667eea;
          border-radius: 8px;
          text-align: center;
        }

        .export-actions {
          display: flex;
          gap: 12px;
          justify-content: center;
          flex-wrap: wrap;
        }

        .table-empty-state {
          text-align: center;
          padding: 80px 24px;
          color: #666;
        }

        .table-empty-state h4 {
          margin: 24px 0 16px;
          color: #333;
          font-size: 20px;
          font-weight: 600;
        }

        .table-empty-state p {
          color: #666;
          max-width: 500px;
          margin: 0 auto;
          line-height: 1.6;
          font-size: 16px;
        }

        .empty-state {
          display: flex;
          flex-direction: column;
          align-items: center;
          justify-content: center;
          padding: 60px 20px;
          text-align: center;
          color: #6c757d;
          background: white;
          border-radius: 8px;
          margin: 20px 0;
        }

        .empty-state svg {
          color: #dee2e6;
          margin-bottom: 20px;
        }

        .empty-state h3 {
          margin: 0 0 10px 0;
          font-size: 18px;
          color: #495057;
        }

        .empty-state p {
          margin: 0 0 20px 0;
          font-size: 14px;
          max-width: 400px;
        }

        .data-preview {
          background: white;
          border-radius: 0;
          overflow: hidden;
        }

        .preview-header {
          display: flex;
          justify-content: space-between;
          align-items: center;
          padding: 15px 20px;
          background: #f8f9fa;
          border-bottom: 1px solid #dee2e6;
        }

        .preview-header h4 {
          margin: 0;
          font-size: 16px;
          font-weight: 600;
        }

        .table-info {
          display: flex;
          gap: 16px;
          font-size: 14px;
          color: #6b7280;
          flex-wrap: wrap;
        }

        .table-container {
          overflow-x: auto;
          max-height: 600px;
          overflow-y: auto;
        }

        .data-table {
          width: 100%;
          border-collapse: collapse;
          font-size: 13px;
        }

        .data-table th {
          background: #f8fafc;
          color: #374151;
          padding: 10px 8px;
          text-align: left;
          font-weight: 600;
          position: sticky;
          top: 0;
          z-index: 10;
          border-bottom: 2px solid #e2e8f0;
          border-right: 1px solid #e2e8f0;
        }

        .data-table th.product-header {
          background: #667eea !important;
          color: white !important;
          min-width: 250px;
          position: sticky;
          left: 0;
          z-index: 11;
        }

        .data-table th.data-header {
          text-align: center !important;
          min-width: 100px;
        }

        .data-table td {
          padding: 8px;
          border-bottom: 1px solid #f1f5f9;
          border-right: 1px solid #f1f5f9;
          white-space: nowrap;
        }

        .data-table td.product-cell {
          font-weight: 500;
          color: #1e293b;
          background: #f8fafc;
          position: sticky;
          left: 0;
          z-index: 5;
          border-right: 2px solid #667eea;
          min-width: 250px;
          word-wrap: break-word;
        }

        .data-table td.data-cell {
          font-family: 'Courier New', monospace;
          font-size: 13px;
          text-align: right;
        }

        .data-table td.numeric {
          text-align: right;
        }

        .data-table tr.total-row {
          background: #e2efda !important;
          font-weight: 600;
        }

        .data-table tr.total-row td.product-cell {
          background: #c3e6cb !important;
          color: #155724 !important;
          font-weight: 700;
        }

        .data-table tr:hover {
          background: #f8f9fa;
        }

        .data-table tr:hover td.product-cell {
          background: #e9ecef;
        }

        .data-table tr.total-row:hover {
          background: #d5e8d4 !important;
        }

        .data-table tr.total-row:hover td.product-cell {
          background: #b3d7b8 !important;
        }

        .table-note {
          padding: 10px 20px;
          background: #f8fafc;
          border-top: 1px solid #dee2e6;
          font-size: 12px;
          color: #6c757d;
          text-align: center;
        }

        .processing-indicator {
          display: flex;
          align-items: center;
          justify-content: center;
          gap: 10px;
          padding: 40px;
          color: #666;
          background: white;
          border-radius: 8px;
          margin: 20px 0;
          box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }

        .integration-warning {
          margin-top: 24px;
          padding: 16px;
          background: #fef3c7;
          border: 1px solid #f59e0b;
          border-radius: 8px;
          color: #92400e;
        }

        .warning-header {
          display: flex;
          align-items: center;
          gap: 8px;
          margin-bottom: 8px;
          font-weight: 600;
        }

        .warning-text {
          font-size: 14px;
          line-height: 1.4;
        }

        .btn {
          display: inline-flex;
          align-items: center;
          gap: 8px;
          padding: 10px 16px;
          border: none;
          border-radius: 6px;
          font-size: 14px;
          font-weight: 500;
          cursor: pointer;
          transition: all 0.2s ease;
          text-decoration: none;
          font-family: inherit;
        }

        .btn:disabled {
          opacity: 0.6;
          cursor: not-allowed;
          transform: none !important;
        }

        .btn-primary {
          background: #667eea;
          color: white;
          box-shadow: 0 2px 4px rgba(102, 126, 234, 0.3);
        }

        .btn-primary:hover:not(:disabled) {
          background: #5a67d8;
          transform: translateY(-1px);
          box-shadow: 0 4px 8px rgba(102, 126, 234, 0.4);
        }

        .btn-secondary {
          background: #6c757d;
          color: white;
          box-shadow: 0 2px 4px rgba(108, 117, 125, 0.3);
        }

        .btn-secondary:hover:not(:disabled) {
          background: #545b62;
          transform: translateY(-1px);
          box-shadow: 0 4px 8px rgba(108, 117, 125, 0.4);
        }

        .btn-large {
          padding: 14px 28px;
          font-size: 16px;
          font-weight: 600;
        }

        /* Responsive Design */
        @media (max-width: 1024px) {
          .sales-analysis-section {
            padding: 16px;
          }

          .export-actions {
            flex-direction: column;
            align-items: stretch;
          }
        }

        @media (max-width: 768px) {
          .sales-analysis-section {
            padding: 12px;
          }

          .section-header {
            flex-direction: column;
            gap: 16px;
            align-items: stretch;
            text-align: center;
          }

          .stats-overview {
            grid-template-columns: 1fr;
          }

          .table-section-header {
            flex-direction: column;
            gap: 12px;
            align-items: stretch;
            text-align: center;
          }

          .export-actions {
            flex-direction: column;
            align-items: stretch;
          }

          .data-table {
            font-size: 12px;
          }

          .data-table th,
          .data-table td {
            padding: 8px 10px;
          }

          .data-table th.product-header,
          .data-table td.product-cell {
            min-width: 200px;
          }
        }

        @media (max-width: 480px) {
          .sales-analysis-section {
            padding: 8px;
          }

          .section-header {
            padding: 16px;
          }

          .section-header h2 {
            font-size: 20px;
          }

          .stat-card {
            padding: 16px;
          }

          .stat-icon {
            width: 32px;
            height: 32px;
          }

          .stat-number {
            font-size: 20px;
          }

          .data-table {
            font-size: 11px;
          }

          .data-table th,
          .data-table td {
            padding: 6px 8px;
          }

          .btn {
            padding: 8px 12px;
            font-size: 13px;
          }
        }
      `}</style>
    </div>
  );
};

export default SalesAnalysisMonthwise;
