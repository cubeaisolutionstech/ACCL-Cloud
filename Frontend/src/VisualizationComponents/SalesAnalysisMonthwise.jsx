import React, { useState, useEffect, useCallback } from 'react';
import { 
  FileSpreadsheet, 
  Download, 
  AlertCircle, 
  CheckCircle, 
  Info, 
  RefreshCw,
  Database,
  Save,
  FileCheck,
  Package,
  TrendingUp
} from 'lucide-react';

const API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';

const SalesAnalysisMonthwise = ({ 
  uploadedFiles, 
  selectedSheets, 
  addMessage, 
  loading, 
  setLoading,
  sessionTotals = null,
  setSessionTotals = null,
  // File storage props - only using global storage now
  storedFiles = [],
  setStoredFiles = null,
  onFileAdd = null,
  onFileRemove = null
}) => {
  const [salesMtData, setSalesMtData] = useState(null);
  const [salesValueData, setSalesValueData] = useState(null);
  const [processing, setProcessing] = useState(false);
  const [hasCheckedSession, setHasCheckedSession] = useState(false);
  const [autoExportEnabled, setAutoExportEnabled] = useState(true);
  const [hasAutoGenerated, setHasAutoGenerated] = useState(false);
  const [fiscalInfo, setFiscalInfo] = useState({});

  // Debug logging for props
  useEffect(() => {
    console.log('🔍 SalesAnalysis Props Check:', {
      storedFiles: storedFiles.length,
      setStoredFiles: typeof setStoredFiles,
      onFileAdd: typeof onFileAdd,
      autoExportEnabled,
      sessionTotals: !!sessionTotals
    });
  }, [storedFiles, setStoredFiles, onFileAdd, autoExportEnabled, sessionTotals]);

  // Session storage management
  const saveToSessionStorage = (key, data) => {
    try {
      sessionStorage.setItem(key, JSON.stringify(data));
    } catch (error) {
      console.warn('Failed to save to session storage:', error);
    }
  };

  const loadFromSessionStorage = (key) => {
    try {
      const data = sessionStorage.getItem(key);
      return data ? JSON.parse(data) : null;
    } catch (error) {
      console.warn('Failed to load from session storage:', error);
      return null;
    }
  };

  // Load data from session storage on component mount
  useEffect(() => {
    const savedSalesMtData = loadFromSessionStorage('salesMtData');
    const savedSalesValueData = loadFromSessionStorage('salesValueData');
    
    if (savedSalesMtData) {
      setSalesMtData(savedSalesMtData);
    }
    if (savedSalesValueData) {
      setSalesValueData(savedSalesValueData);
    }
  }, []);

  // Save data to session storage whenever data changes
  useEffect(() => {
    if (salesMtData) {
      saveToSessionStorage('salesMtData', salesMtData);
    }
  }, [salesMtData]);

  useEffect(() => {
    if (salesValueData) {
      saveToSessionStorage('salesValueData', salesValueData);
    }
  }, [salesValueData]);

  // Store file in global storage - KEEP ONLY LATEST FILE
  const storeFileInSession = useCallback(async (fileBlob, fileName, analysisType, fileDescription) => {
    try {
      const timestamp = new Date().toISOString();
      const fileUrl = URL.createObjectURL(fileBlob);
      
      const storedFileData = {
        id: `sales_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
        name: fileName,
        blob: fileBlob,
        size: fileBlob.size,
        url: fileUrl,
        createdAt: timestamp,
        fiscalYear: fiscalInfo.current_year || 'N/A',
        type: `sales-${analysisType}`,
        source: 'Sales Analysis Monthwise',
        description: fileDescription,
        mtRecords: salesMtData?.data?.length || 0,
        valueRecords: salesValueData?.data?.length || 0,
        sheets: analysisType.includes('combined') ? 
          ['Combined Sales Analysis'] :
          [`Sales ${analysisType.toUpperCase()} Analysis`],
        analysisType: analysisType,
        metadata: {
          singleSheet: analysisType.includes('single-sheet'),
          bothTables: analysisType.includes('combined'),
          columnOrdered: true,
          fiscalYear: fiscalInfo.current_year,
          analysisType: 'sales',
          autoGenerated: analysisType.includes('auto'),
          hasSessionTotals: !!sessionTotals,
          auditorFile: uploadedFiles.auditor?.filename,
          auditorSheet: selectedSheets.auditor,
          integration: {
            combined_data_ready: true,
            sync_status: 'ready'
          }
        },
        tags: ['sales', 'monthwise', 'analysis', analysisType.includes('combined') ? 'combined' : 'individual']
      };

      console.log('🔄 Storing Sales Analysis file (replacing previous):', {
        fileName,
        analysisType,
        fileSize: fileBlob.size
      });

      // FIRST: Remove any existing Sales Analysis files to keep only the latest
      if (typeof setStoredFiles === 'function') {
        setStoredFiles(prev => {
          // Remove old Sales Analysis files and clean up their URLs
          const oldSalesFiles = prev.filter(f => f.type && f.type.includes('sales'));
          oldSalesFiles.forEach(file => {
            if (file.url) {
              URL.revokeObjectURL(file.url);
            }
          });
          
          // Keep only non-sales files and add the new one
          const otherFiles = prev.filter(f => !f.type || !f.type.includes('sales'));
          return [storedFileData, ...otherFiles];
        });
        
        console.log('✅ Sales Analysis file replaced (keeping only latest)');
        addMessage(`💾 ${fileName} stored (previous Sales Analysis file replaced)`, 'success');
        return storedFileData;
      }
      
      // Fallback: try onFileAdd if setStoredFiles not available
      if (typeof onFileAdd === 'function') {
        onFileAdd(storedFileData);
        console.log('✅ Sales Analysis file added via onFileAdd callback');
        addMessage(`💾 ${fileName} stored in Combined Excel Manager`, 'success');
        return storedFileData;
      }

      addMessage('⚠️ File generated but could not be stored', 'warning');
      return null;
    } catch (error) {
      console.error('❌ Error storing Sales Analysis file:', error);
      addMessage(`❌ Error storing file: ${error.message}`, 'error');
      return null;
    }
  }, [salesMtData, salesValueData, sessionTotals, uploadedFiles, selectedSheets, addMessage, onFileAdd, setStoredFiles, fiscalInfo]);

  // Auto-generate Excel file
  const autoGenerateSalesReport = useCallback(async () => {
    if (!autoExportEnabled) {
      console.log('🚫 Auto-export disabled, skipping auto-generation');
      return;
    }
    
    if (!salesMtData && !salesValueData) {
      console.log('🚫 No data available for auto-generation');
      return;
    }

    console.log('🤖 Auto-generating Sales Analysis report...');

    try {
      const timestamp = new Date().toISOString().slice(0, 19).replace(/[:-]/g, '');
      const fileName = `sales_auto_combined_${fiscalInfo.current_year || 'report'}_${timestamp}.xlsx`;

      // Ensure columns are ordered before sending to backend
      const orderedMtData = orderColumns(salesMtData);
      const orderedValueData = orderColumns(salesValueData);

      const response = await fetch(`${API_BASE_URL}/download-sales-monthwise-excel`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          sales_mt_data: orderedMtData,
          sales_value_data: orderedValueData,
          auto_generated: true
        })
      });

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      const blob = await response.blob();
      
      const fileDescription = `Auto-generated Sales Analysis with MT (${orderedMtData?.data?.length || 0} records) and Value (${orderedValueData?.data?.length || 0} records) with session totals integration`;
      await storeFileInSession(blob, fileName, 'combined-auto', fileDescription);
      
      addMessage(`🤖 Auto-generated: ${fileName}`, 'success');
      setHasAutoGenerated(true);
      return { success: true, fileName };
    } catch (error) {
      console.error('❌ Auto-generation error:', error);
      addMessage(`❌ Auto-generation error: ${error.message}`, 'error');
      return { success: false, error: error.message };
    }
  }, [autoExportEnabled, salesMtData, salesValueData, storeFileInSession, addMessage, fiscalInfo]);

  // Auto-generate report when data is available (always enabled)
  useEffect(() => {
    if (autoExportEnabled && (salesMtData || salesValueData) && sessionTotals && !hasAutoGenerated) {
      const timer = setTimeout(() => {
        autoGenerateSalesReport();
      }, 2000); // 2 second delay after processing completes
      
      return () => clearTimeout(timer);
    }
  }, [salesMtData, salesValueData, sessionTotals, autoExportEnabled, hasAutoGenerated, autoGenerateSalesReport]);

  const handleAnalysisSuccess = useCallback((mtResult, valueResult, resultFiscalInfo) => {
    console.log('🎯 Sales Analysis Success:', {
      mtResult: !!mtResult,
      valueResult: !!valueResult,
      onFileAdd: typeof onFileAdd,
      setStoredFiles: typeof setStoredFiles,
      autoExportEnabled,
      currentStoredFiles: storedFiles.length
    });

    // Ensure columns are in the correct order
    const orderedMtData = orderColumns(mtResult);
    const orderedValueData = orderColumns(valueResult);
    
    setSalesMtData(orderedMtData);
    setSalesValueData(orderedValueData);
    
    if (resultFiscalInfo) {
      setFiscalInfo(resultFiscalInfo);
    }

    setHasAutoGenerated(false);

    const mtRows = orderedMtData?.data?.length || 0;
    const valueRows = orderedValueData?.data?.length || 0;
    
    if (mtRows > 0 && valueRows > 0) {
      addMessage(`✅ Sales Analysis completed successfully - MT: ${mtRows} rows, Value: ${valueRows} rows`, 'success');
    } else if (mtRows > 0) {
      addMessage(`✅ Sales Analysis completed - MT: ${mtRows} rows (Value data not available)`, 'success');
    } else if (valueRows > 0) {
      addMessage(`✅ Sales Analysis completed - Value: ${valueRows} rows (MT data not available)`, 'success');
    } else {
      addMessage('⚠️ Sales Analysis completed but no data was generated. Please check your input files.', 'warning');
    }

    addMessage('✅ Sales Analysis processed with session totals integrated into ACCLLP rows!', 'success');
  }, [addMessage, autoExportEnabled, onFileAdd, setStoredFiles, storedFiles.length]);

  // Auto-process when tab is opened and requirements are met
  useEffect(() => {
    const autoProcess = async () => {
      if (uploadedFiles.auditor && 
          selectedSheets.auditor && 
          sessionTotals && 
          !hasCheckedSession && 
          !processing) {
        
        setHasCheckedSession(true);
        await processSalesAnalysisWithSession();
      }
    };

    autoProcess();
  }, [uploadedFiles.auditor, selectedSheets.auditor, sessionTotals, hasCheckedSession, processing]); // eslint-disable-line react-hooks/exhaustive-deps

  // Process the sales analysis data using session totals
  const processSalesAnalysisWithSession = async () => {
    if (!uploadedFiles.auditor) {
      addMessage('Please upload an auditor file first', 'error');
      return;
    }

    if (!selectedSheets.auditor) {
      addMessage('Please select an auditor sheet first', 'error');
      return;
    }

    if (!sessionTotals) {
      addMessage('Session totals required. Please run Product Analysis first.', 'error');
      return;
    }

    setProcessing(true);
    setLoading(true);

    try {
      addMessage('🔄 Processing Sales Analysis with session totals...', 'info');

      const response = await fetch(`${API_BASE_URL}/process-sales-monthwise-with-session`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          filepath: uploadedFiles.auditor.filepath,
          sheet_name: selectedSheets.auditor,
          session_totals: sessionTotals
        })
      });

      const result = await response.json();

      if (result.success) {
        const resultFiscalInfo = {
          current_year: result.fiscal_year || '25-26'
        };
        
        handleAnalysisSuccess(result.sales_mt_table, result.sales_value_table, resultFiscalInfo);
      } else {
        addMessage(result.error || 'Failed to process sales analysis data', 'error');
        setSalesMtData(null);
        setSalesValueData(null);
      }
    } catch (error) {
      addMessage(`❌ Sales Analysis processing error: ${error.message}`, 'error');
      setSalesMtData(null);
      setSalesValueData(null);
    } finally {
      setProcessing(false);
      setLoading(false);
    }
  };

  // Helper function to order columns consistently
  const orderColumns = (tableData) => {
    if (!tableData || !tableData.columns || !tableData.data) return tableData;
    
    // Define the desired column order (adjust as needed)
    const desiredOrder = [
      'Product', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 
      'Oct', 'Nov', 'Dec', 'Jan', 'Feb', 'Mar', 'YTD'
    ];
    
    // Filter and order columns based on desired order
    const orderedColumns = desiredOrder.filter(col => 
      tableData.columns.includes(col)
    );
    
    // Add any remaining columns not in the desired order
    const remainingColumns = tableData.columns.filter(col => 
      !desiredOrder.includes(col)
    );
    
    const finalColumns = [...orderedColumns, ...remainingColumns];
    
    // Reorder the data rows
    const orderedData = tableData.data.map(row => {
      const newRow = {};
      finalColumns.forEach(col => {
        if (row.hasOwnProperty(col)) {
          newRow[col] = row[col];
        }
      });
      return newRow;
    });
    
    return {
      ...tableData,
      columns: finalColumns,
      data: orderedData
    };
  };

  // Format number for display using Indian locale
  const formatNumber = (value) => {
    if (typeof value === 'number') {
      return value.toLocaleString('en-IN', { 
        minimumFractionDigits: 2, 
        maximumFractionDigits: 2 
      });
    }
    if (value === "" || value === null || value === undefined || value === 0) return "";
    const num = parseFloat(value);
    if (isNaN(num)) return value;
    return num.toLocaleString('en-IN', { minimumFractionDigits: 2, maximumFractionDigits: 2 });
  };

  // Download and store Excel file
  const downloadAndStoreExcel = async (shouldStore = true) => {
    if (!salesMtData && !salesValueData) {
      addMessage('No data available to export', 'error');
      return;
    }

    console.log('📤 Exporting Sales Analysis tables');
    setLoading(true);

    try {
      // Ensure columns are ordered before sending to backend
      const orderedMtData = orderColumns(salesMtData);
      const orderedValueData = orderColumns(salesValueData);

      const timestamp = new Date().toISOString().slice(0, 19).replace(/[:-]/g, '');
      const fileName = shouldStore ? 
        `sales_analysis_manual_${timestamp}.xlsx` :
        `sales_analysis_download_${timestamp}.xlsx`;

      const response = await fetch(`${API_BASE_URL}/download-sales-monthwise-excel`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          sales_mt_data: orderedMtData,
          sales_value_data: orderedValueData
        })
      });

      if (!response.ok) {
        const errorText = await response.text();
        throw new Error(`HTTP error! status: ${response.status}, message: ${errorText}`);
      }

      const blob = await response.blob();
      
      // Store in global storage if requested
      if (shouldStore) {
        const fileDescription = `Manual Sales Analysis with MT (${orderedMtData?.data?.length || 0} records) and Value (${orderedValueData?.data?.length || 0} records) with session totals integration`;
        await storeFileInSession(blob, fileName, 'combined-manual', fileDescription);
      }
      
      // Also trigger immediate download
      const url = window.URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = fileName;
      document.body.appendChild(a);
      a.click();
      window.URL.revokeObjectURL(url);
      document.body.removeChild(a);
      
      addMessage(`✅ Sales analysis exported successfully: ${fileName}`, 'success');
    } catch (error) {
      addMessage(`❌ Export error: ${error.message}`, 'error');
    } finally {
      setLoading(false);
    }
  };

  // Clear session data
  const clearSessionData = () => {
    try {
      sessionStorage.removeItem('salesMtData');
      sessionStorage.removeItem('salesValueData');
      setSalesMtData(null);
      setSalesValueData(null);
      addMessage('Session data cleared successfully', 'info');
    } catch (error) {
      addMessage('Failed to clear session data', 'error');
    }
  };

  // Get Sales Analysis specific files from global storage
  const salesAnalysisFiles = storedFiles.filter(f => f.type && f.type.includes('sales'));

  // Check requirements
  const hasAuditorFile = uploadedFiles.auditor;
  const hasAuditorSheet = selectedSheets.auditor;
  const hasSessionData = sessionTotals && Object.keys(sessionTotals).length > 0;
  const canProcess = hasAuditorFile && hasAuditorSheet && hasSessionData;

  const getRowClassName = (salesName) => {
    const name = (salesName || '').toString().toUpperCase();
    if (name.includes('ACCLLP') || name.includes('TOTAL SALES')) return 'accllp-row';
    if (name.includes('TOTAL')) return 'total-row';
    return '';
  };

  // Data table component
  const DataTable = ({ data, title, tableType }) => {
    if (!data || !data.data || data.data.length === 0) {
      return (
        <div className="table-empty-state">
          <h4>No {title} Data Available</h4>
          <p>
            {!canProcess ? 
              "Upload auditor file and ensure session totals are available to start analysis" :
              "Click 'Refresh Analysis' to generate data"
            }
          </p>
        </div>
      );
    }

    const columns = data.columns || [];
    const firstCol = columns[0];

    const salesColumnNames = ['Product', 'PRODUCT'];
    let salesColumn = columns[0];
    
    for (const colName of salesColumnNames) {
      if (columns.includes(colName)) {
        salesColumn = colName;
        break;
      }
    }

    return (
      <div className="data-preview">
        <div className="preview-header">
          <h4>{title}</h4>
          <div className="table-info">
            <span>Shape: {data.shape[0]} rows × {data.shape[1]} columns</span>
          </div>
        </div>
        
        <div className="table-container">
          <table className="data-table">
            <thead>
              <tr>
                {columns.map((col, index) => (
                  <th 
                    key={index} 
                    className={col === salesColumn ? 'sales-header' : 'data-header'}
                    title={col}
                  >
                    {col.includes('YTD') ? col : (col.length > 15 ? `${col.substring(0, 15)}...` : col)}
                  </th>
                ))}
              </tr>
            </thead>
            <tbody>
              {data.data.slice(0, 100).map((row, rowIndex) => {
                const rowClass = getRowClassName(row[salesColumn]);
                return (
                  <tr key={rowIndex} className={`${rowClass} ${
                    (row[salesColumn] || '').toString().toUpperCase().includes('TOTAL') ? 'total-row' : ''
                  }`}>
                    {columns.map((col, colIndex) => {
                      const value = row[col];
                      const isNumeric = typeof value === 'number' && !isNaN(value);
                      const formattedValue = isNumeric ? formatNumber(value) : (value || '');
                      
                      return (
                        <td 
                          key={colIndex} 
                          className={`${col === salesColumn ? 'sales-cell' : 'data-cell'} ${isNumeric ? 'numeric' : ''}`}
                        >
                          {formattedValue}
                        </td>
                      );
                    })}
                  </tr>
                );
              })}
            </tbody>
          </table>
        </div>
        
        {data.data.length > 100 && (
          <div className="table-note">
            Showing first 100 rows of {data.data.length} total rows
          </div>
        )}
      </div>
    );
  };

  const AutoExportToggle = () => (
    <div className="auto-export-control">
      <label className="toggle-label">
        <input
          type="checkbox"
          checked={autoExportEnabled}
          onChange={(e) => {
            setAutoExportEnabled(e.target.checked);
            setHasAutoGenerated(false);
          }}
          className="toggle-input"
        />
        <span className="toggle-switch"></span>
        Auto-generate Excel file
      </label>
      <small className="toggle-help">
        Automatically generate combined sales Excel file with both tables
      </small>
    </div>
  );

  return (
    <div className="sales-analysis-section">
      <div className="section-header">
        <h1>Sales Analysis Month-wise</h1>
        <div className="header-actions">
          <button
            onClick={processSalesAnalysisWithSession}
            className="btn btn-primary"
            disabled={!canProcess || loading || processing}
          >
            {processing ? <RefreshCw size={16} className="spin" /> : null}
            {processing ? 'Processing...' : 'Refresh Analysis'}
          </button>

          {storedFiles.some(f => f.type && f.type.includes('sales')) && (
            <div className="integration-status-badge">
              <span>Latest file stored</span>
            </div>
          )}
        </div>
      </div>

      <div className="stats-overview">
        <div className="stat-card">
          <div className="stat-content">
            <span className="stat-number">{salesMtData?.shape?.[0] || 0}</span>
            <span className="stat-label">Sales MT Records</span>
          </div>
        </div>
        <div className="stat-card">
          <div className="stat-content">
            <span className="stat-number">{salesValueData?.shape?.[0] || 0}</span>
            <span className="stat-label">Sales Value Records</span>
          </div>
        </div>
        <div className="stat-card">
          <div className="stat-content">
            <span className="stat-number">
              {storedFiles.filter(f => f.type && f.type.includes('sales')).length > 0 ? '1' : '0'}
            </span>
            <span className="stat-label">Stored Files</span>
          </div>
        </div>
      </div>

      {/* Action Buttons */}
      {canProcess && (salesMtData || salesValueData) && (
        <div className="export-merged-section">
          <div className="export-actions">
            <button
              onClick={() => downloadAndStoreExcel(true)}
              className="btn btn-primary btn-large"
              disabled={loading}
              title="Generate, download and store in Combined Data Manager"
            >
              <Save size={16} />
              {loading ? 'Processing...' : 'Download SalesMonthwise Report'}
            </button>
          </div>
        </div>
      )}

      {/* Data Tables */}
      <div className="tables-section">
        <div className="table-section">
          <div className="table-section-header">
            <h4>SALES in Quantity</h4>
            <div className="table-status">
              {salesMtData ? (
                <span className="status-badge available">Available ({salesMtData.shape[0]} records)</span>
              ) : (
                <span className="status-badge unavailable">Not Available</span>
              )}
            </div>
          </div>

          {salesMtData ? (
            <DataTable
              data={salesMtData}
              title="SALES in MT"
              tableType="MT"
            />
          ) : (
            <div className="table-empty-state">
              <h4>No Sales MT Data Available</h4>
              <p>
                {!canProcess ? 
                  "Upload auditor file and ensure session totals are available" :
                  "Click 'Refresh Analysis' to generate MT data"
                }
              </p>
            </div>
          )}
        </div>

        <div className="table-separator"></div>

        <div className="table-section">
          <div className="table-section-header">
            <h4>SALES in Value</h4>
            <div className="table-status">
              {salesValueData ? (
                <span className="status-badge available">Available ({salesValueData.shape[0]} records)</span>
              ) : (
                <span className="status-badge unavailable">Not Available</span>
              )}
            </div>
          </div>

          {salesValueData ? (
            <DataTable
              data={salesValueData}
              title="SALES in Value"
              tableType="Value"
            />
          ) : (
            <div className="table-empty-state">
              <h4>No Sales Value Data Available</h4>
              <p>
                {!canProcess ? 
                  "Upload auditor file and ensure session totals are available" :
                  "Click 'Refresh Analysis' to generate Value data"
                }
              </p>
            </div>
          )}
        </div>
      </div>

      {/* Loading/Empty States */}
      {!canProcess && (
        <div className="empty-state">
          <FileSpreadsheet size={48} />
          <h3>
            {!hasSessionData ? 'Session Totals Required' : 'Ready to Process'}
          </h3>
          <p>
            {!hasSessionData 
              ? 'Please run Product Analysis first to generate session totals, then return to this tab.'
              : 'Upload auditor file and select sheet to automatically process sales analysis.'}
          </p>
        </div>
      )}

      {processing && (
        <div className="processing-indicator">
          <RefreshCw size={24} className="spin" />
          <span>Processing Sales Analysis with session totals...</span>
        </div>
      )}

      {/* Integration Help */}
      {(!onFileAdd || !setStoredFiles) && (
        <div className="integration-warning">
          <div className="warning-header">
            <AlertCircle size={16} />
            Limited Storage Integration
          </div>
          <div className="warning-text">
            Some storage functions are not available. Files can still be generated and downloaded, 
            but automatic storage in Combined Data Manager may be limited.
          </div>
        </div>
      )}

      <style jsx>{`
        .sales-analysis-section {
          padding: 32px;
          font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen', 'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue', sans-serif;
          background-color: #f8fafc;
          min-height: 100vh;
        }

        .section-header {
          display: flex;
          justify-content: space-between;
          align-items: center;
          margin-bottom: 32px;
          background: white;
          padding: 16px 24px;
          border-radius: 8px;
          box-shadow: 0 1px 3px rgba(0,0,0,0.12), 0 1px 2px rgba(0,0,0,0.24);
        }

        .section-header h1 {
          margin: 0;
          color: #1e293b;
          font-size: 24px;
          font-weight: 700;
          letter-spacing: -0.025em;
        }

        .header-actions {
          display: flex;
          gap: 16px;
          align-items: center;
        }

        .integration-status-badge {
          display: none;
        }

        .stats-overview {
          display: grid;
          grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
          gap: 16px;
          margin-bottom: 32px;
        }

        .stat-card {
          background: white;
          padding: 16px 20px;
          border-radius: 8px;
          box-shadow: 0 1px 3px rgba(0,0,0,0.12), 0 1px 2px rgba(0,0,0,0.24);
          transition: all 0.3s ease;
          border-left: 3px solid #3b82f6;
        }

        .stat-card:hover {
          transform: translateY(-1px);
          box-shadow: 0 4px 6px rgba(0,0,0,0.12), 0 2px 4px rgba(0,0,0,0.06);
        }

        .stat-content {
          display: flex;
          flex-direction: column;
          gap: 4px;
        }

        .stat-number {
          font-size: 24px;
          font-weight: 700;
          color: #1e293b;
          line-height: 1;
        }

        .stat-label {
          font-size: 12px;
          color: #64748b;
          text-transform: uppercase;
          letter-spacing: 0.05em;
          font-weight: 600;
        }

        .auto-export-control {
          margin-top: 32px;
          padding: 24px;
          background: white;
          border-radius: 12px;
          box-shadow: 0 1px 3px rgba(0,0,0,0.12), 0 1px 2px rgba(0,0,0,0.24);
        }

        .toggle-label {
          display: flex;
          align-items: center;
          gap: 16px;
          cursor: pointer;
          font-size: 16px;
          font-weight: 600;
          color: #1e293b;
        }

        .toggle-input {
          display: none;
        }

        .toggle-switch {
          position: relative;
          width: 52px;
          height: 28px;
          background: #cbd5e1;
          border-radius: 14px;
          transition: background 0.3s ease;
        }

        .toggle-switch::before {
          content: '';
          position: absolute;
          top: 2px;
          left: 2px;
          width: 24px;
          height: 24px;
          background: white;
          border-radius: 50%;
          transition: transform 0.3s ease;
          box-shadow: 0 2px 4px rgba(0,0,0,0.2);
        }

        .toggle-input:checked + .toggle-switch {
          background: #3b82f6;
        }

        .toggle-input:checked + .toggle-switch::before {
          transform: translateX(24px);
        }

        .toggle-help {
          display: block;
          margin-top: 12px;
          color: #64748b;
          font-size: 14px;
          font-weight: 400;
          line-height: 1.5;
        }

        .tables-section {
          display: flex;
          flex-direction: column;
          gap: 32px;
        }

        .table-section {
          margin-bottom: 32px;
          border: 1px solid #e2e8f0;
          border-radius: 12px;
          overflow: hidden;
          background: white;
          box-shadow: 0 1px 3px rgba(0,0,0,0.12), 0 1px 2px rgba(0,0,0,0.24);
        }

        .table-section-header {
          display: flex;
          justify-content: space-between;
          align-items: center;
          padding: 24px 32px;
          background: #f8fafc;
          border-bottom: 1px solid #e2e8f0;
        }

        .table-section-header h4 {
          margin: 0;
          color: #1e293b;
          font-size: 20px;
          font-weight: 700;
        }

        .table-status {
          display: flex;
          align-items: center;
        }

        .status-badge {
          padding: 8px 16px;
          border-radius: 20px;
          font-size: 14px;
          font-weight: 600;
          border: 1px solid;
        }

        .status-badge.available {
          background: #d1fae5;
          color: #065f46;
          border-color: #a7f3d0;
        }

        .status-badge.unavailable {
          background: #fee2e2;
          color: #991b1b;
          border-color: #fecaca;
        }

        .table-separator {
          height: 24px;
        }

        .export-merged-section {
          padding: 24px;
          background: #f8fafc;
          border: 2px dashed #3b82f6;
          border-radius: 12px;
          text-align: center;
          margin-bottom: 32px;
        }

        .export-actions {
          display: flex;
          gap: 16px;
          justify-content: center;
          flex-wrap: wrap;
        }

        .table-empty-state {
          text-align: center;
          padding: 80px 32px;
          color: #64748b;
        }

        .table-empty-state h4 {
          margin: 0 0 16px;
          color: #1e293b;
          font-size: 24px;
          font-weight: 700;
        }

        .table-empty-state p {
          color: #64748b;
          max-width: 500px;
          margin: 0 auto 24px;
          line-height: 1.6;
          font-size: 16px;
        }

        .empty-state {
          display: flex;
          flex-direction: column;
          align-items: center;
          justify-content: center;
          padding: 80px 32px;
          text-align: center;
          background: white;
          border-radius: 12px;
          box-shadow: 0 1px 3px rgba(0,0,0,0.12), 0 1px 2px rgba(0,0,0,0.24);
          margin: 32px 0;
        }

        .empty-state svg {
          color: #dee2e6;
          margin-bottom: 20px;
        }

        .empty-state h3 {
          margin: 0 0 16px;
          font-size: 24px;
          color: #1e293b;
          font-weight: 700;
        }

        .empty-state p {
          margin: 0 0 24px;
          font-size: 16px;
          color: #64748b;
          max-width: 400px;
          line-height: 1.6;
        }

        .data-preview {
          background: white;
          border-radius: 0;
          overflow: hidden;
        }

        .preview-header {
          display: flex;
          justify-content: space-between;
          align-items: center;
          padding: 24px 32px;
          background: #f8fafc;
          border-bottom: 1px solid #e2e8f0;
        }

        .preview-header h4 {
          margin: 0;
          font-size: 18px;
          font-weight: 700;
          color: #1e293b;
        }

        .table-info {
          display: flex;
          gap: 16px;
          font-size: 14px;
          color: #6b7280;
          flex-wrap: wrap;
        }

        .table-container {
          overflow-x: auto;
          max-height: 600px;
          overflow-y: auto;
        }

        .data-table {
          width: 100%;
          border-collapse: collapse;
          font-size: 14px;
        }

        .data-table th {
          background: #f8fafc;
          color: #374151;
          padding: 16px 12px;
          text-align: left;
          font-weight: 700;
          position: sticky;
          top: 0;
          z-index: 10;
          border-bottom: 2px solid #e2e8f0;
          border-right: 1px solid #e2e8f0;
        }

        .sales-header {
          background: #1e40af !important;
          color: white !important;
          min-width: 200px;
          position: sticky;
          left: 0;
          z-index: 11;
        }

        .data-header {
          text-align: center !important;
          min-width: 100px;
        }

        .data-table td {
          padding: 12px;
          border-bottom: 1px solid #f1f5f9;
          border-right: 1px solid #f1f5f9;
          white-space: nowrap;
        }

        .sales-cell {
          font-weight: 600;
          color: #1e293b;
          background: #f8fafc;
          position: sticky;
          left: 0;
          z-index: 5;
          border-right: 2px solid #1e40af;
          min-width: 200px;
        }

        .data-cell {
          font-family: 'SF Mono', 'Monaco', 'Inconsolata', 'Roboto Mono', monospace;
          font-size: 14px;
          text-align: right;
        }

        .data-cell.numeric {
          text-align: right;
        }

        .accllp-row {
          background: #fef3c7 !important;
          font-weight: 600;
        }

        .accllp-row .sales-cell {
          background: #f59e0b !important;
          color: white !important;
          font-weight: 800;
        }

        .total-row {
          background: #dcfce7 !important;
          font-weight: 600;
        }

        .total-row .sales-cell {
          background: #22c55e !important;
          color: white !important;
          font-weight: 800;
        }

        .data-table tr:hover {
          background: #f8fafc;
        }

        .data-table tr:hover .sales-cell {
          background: #e2e8f0;
        }

        .data-table tr.total-row:hover .sales-cell,
        .data-table tr.accllp-row:hover .sales-cell {
          opacity: 0.9;
        }

        .table-note {
          padding: 16px 32px;
          background: #f8fafc;
          border-top: 1px solid #e2e8f0;
          font-size: 14px;
          color: #64748b;
          text-align: center;
        }

        .processing-indicator {
          display: flex;
          align-items: center;
          justify-content: center;
          gap: 12px;
          padding: 48px;
          color: #64748b;
          background: white;
          border-radius: 12px;
          margin: 32px 0;
          box-shadow: 0 1px 3px rgba(0,0,0,0.12), 0 1px 2px rgba(0,0,0,0.24);
          font-size: 16px;
          font-weight: 600;
        }

        .integration-warning {
          margin-top: 24px;
          padding: 16px;
          background: #fef3c7;
          border: 1px solid #f59e0b;
          border-radius: 8px;
          color: #92400e;
        }

        .warning-header {
          display: flex;
          align-items: center;
          gap: 8px;
          margin-bottom: 8px;
          font-weight: 600;
        }

        .warning-text {
          font-size: 14px;
          line-height: 1.4;
        }

        .btn {
          display: inline-flex;
          align-items: center;
          gap: 12px;
          padding: 12px 24px;
          border: none;
          border-radius: 8px;
          font-size: 16px;
          font-weight: 600;
          cursor: pointer;
          transition: all 0.3s ease;
          text-decoration: none;
          font-family: inherit;
        }

        .btn:disabled {
          opacity: 0.6;
          cursor: not-allowed;
          transform: none !important;
        }

        .btn-primary {
          background: #3b82f6;
          color: white;
          box-shadow: 0 4px 6px rgba(59, 130, 246, 0.25);
        }

        .btn-primary:hover:not(:disabled) {
          background: #2563eb;
          transform: translateY(-1px);
          box-shadow: 0 6px 8px rgba(59, 130, 246, 0.3);
        }

        .btn-secondary {
          background: #6c757d;
          color: white;
          box-shadow: 0 4px 6px rgba(108, 117, 125, 0.25);
        }

        .btn-secondary:hover:not(:disabled) {
          background: #545b62;
          transform: translateY(-1px);
          box-shadow: 0 6px 8px rgba(108, 117, 125, 0.3);
        }

        .btn-large {
          padding: 16px 32px;
          font-size: 18px;
          font-weight: 700;
        }

        @keyframes spin {
          from { transform: rotate(0deg); }
          to { transform: rotate(360deg); }
        }

        .spin {
          animation: spin 1s linear infinite;
        }

        @media (max-width: 1024px) {
          .sales-analysis-section {
            padding: 24px;
          }

          .export-actions {
            flex-direction: column;
            align-items: stretch;
          }
        }

        @media (max-width: 768px) {
          .sales-analysis-section {
            padding: 16px;
          }

          .section-header {
            flex-direction: column;
            gap: 20px;
            align-items: stretch;
            text-align: center;
            padding: 12px 16px;
          }

          .section-header h1 {
            font-size: 20px;
          }

          .stats-overview {
            grid-template-columns: 1fr;
          }

          .table-section-header {
            flex-direction: column;
            gap: 16px;
            align-items: stretch;
            text-align: center;
            padding: 20px;
          }

          .export-actions {
            flex-direction: column;
            align-items: stretch;
          }

          .data-table th.sales-header,
          .data-table td.sales-cell {
            min-width: 150px;
          }

          .toggle-label {
            flex-direction: column;
            align-items: flex-start;
            gap: 12px;
          }
        }

        @media (max-width: 480px) {
          .sales-analysis-section {
            padding: 12px;
          }

          .section-header {
            padding: 10px 12px;
          }

          .section-header h1 {
            font-size: 18px;
          }

          .stat-card {
            padding: 24px;
          }

          .stat-number {
            font-size: 32px;
          }

          .auto-export-control {
            padding: 20px;
          }

          .data-table {
            font-size: 13px;
          }

          .data-table th,
          .data-table td {
            padding: 10px 8px;
          }

          .btn {
            padding: 10px 20px;
            font-size: 14px;
          }

          .btn-large {
            padding: 14px 28px;
            font-size: 16px;
          }

          .export-merged-section {
            padding: 20px;
          }
        }
      `}</style>
    </div>
  );
};

export default SalesAnalysisMonthwise;
