import React, { useState, useEffect, useCallback } from 'react';
import { 
  Download,
  RefreshCw,
  TrendingUp,
  Package,
  Database,
  FileSpreadsheet,
  Eye,
  BarChart3,
  Save,
  CheckCircle,
  AlertCircle,
  Info
} from 'lucide-react';

const API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';

const TSPWAnalysis = ({ 
  uploadedFiles, 
  selectedSheets, 
  addMessage, 
  loading, 
  setLoading,
  storedFiles = [],
  setStoredFiles = () => {},
  onFileAdd = () => {}
}) => {
  const [activeSubTab, setActiveSubTab] = useState('mt');
  const [tsPwData, setTsPwData] = useState({
    mt_data: null,
    value_data: null,
    fiscal_year: '',
    columns: { mt: [], value: [] },
    shape: { mt: [0, 0], value: [0, 0] }
  });
  const [processing, setProcessing] = useState(false);
  const [fiscalInfo, setFiscalInfo] = useState({});
  const [autoExportEnabled, setAutoExportEnabled] = useState(true);
  const [hasAutoGenerated, setHasAutoGenerated] = useState(false);

  // Debug logging for props
  useEffect(() => {
    console.log('TSPWAnalysis Props Check:', {
      storedFiles: storedFiles.length,
      setStoredFiles: typeof setStoredFiles,
      onFileAdd: typeof onFileAdd,
      autoExportEnabled
    });
  }, [storedFiles, setStoredFiles, onFileAdd, autoExportEnabled]);

  const canProcess = useCallback(() => {
    return uploadedFiles.budget && selectedSheets.budget;
  }, [uploadedFiles.budget, selectedSheets.budget]);

  // Store file in session function - Latest only storage pattern
  const storeFileInSession = useCallback(async (fileBlob, fileName, analysisType, fileDescription) => {
    try {
      const timestamp = new Date().toISOString();
      const fileUrl = URL.createObjectURL(fileBlob);
      
      const storedFileData = {
        id: `tspw_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
        name: fileName,
        blob: fileBlob,
        size: fileBlob.size,
        url: fileUrl,
        createdAt: timestamp,
        fiscalYear: fiscalInfo.current_year || tsPwData.fiscal_year || 'N/A',
        type: `tspw-${analysisType}`,
        source: 'TS-PW Analysis (NORTH)',
        description: fileDescription,
        mtRecords: analysisType === 'mt' || analysisType.includes('combined') ? 
          (tsPwData.shape?.mt?.[0] || 0) : 0,
        valueRecords: analysisType === 'value' || analysisType.includes('combined') ? 
          (tsPwData.shape?.value?.[0] || 0) : 0,
        sheets: analysisType.includes('combined') ? 
          ['Combined TS-PW Analysis'] :
          analysisType === 'report' ?
          ['Executive Summary', 'TSPW_MT_Analysis', 'TSPW_Value_Analysis', 'Combined_Analysis'] :
          [`TSPW ${analysisType.toUpperCase()} Analysis`],
        analysisType: analysisType,
        metadata: {
          singleSheet: analysisType.includes('single-sheet'),
          bothTables: analysisType.includes('combined'),
          columnOrdered: true,
          fiscalYear: fiscalInfo.current_year || tsPwData.fiscal_year,
          analysisType: 'tspw',
          isReport: analysisType === 'report',
          autoGenerated: analysisType.includes('auto'),
          integration: {
            combined_data_ready: true,
            sync_status: 'ready'
          }
        },
        tags: ['tspw', 'north', 'analysis', analysisType.includes('combined') ? 'combined' : 'individual']
      };

      console.log('Storing TS-PW file (replacing previous):', {
        fileName,
        analysisType,
        fileSize: fileBlob.size
      });

      // Remove any existing TS-PW files to keep only the latest
      if (typeof setStoredFiles === 'function') {
        setStoredFiles(prev => {
          // Remove old TS-PW files and clean up their URLs
          const oldTsPwFiles = prev.filter(f => f.type && f.type.includes('tspw'));
          oldTsPwFiles.forEach(file => {
            if (file.url) {
              URL.revokeObjectURL(file.url);
            }
          });
          
          // Keep only non-TS-PW files and add the new one
          const otherFiles = prev.filter(f => !f.type || !f.type.includes('tspw'));
          return [storedFileData, ...otherFiles];
        });
        
        console.log('TS-PW file replaced (keeping only latest)');
        addMessage(`${fileName} stored (previous TS-PW file replaced)`, 'success');
        return storedFileData;
      }
      
      // Fallback: try onFileAdd if setStoredFiles not available
      if (typeof onFileAdd === 'function') {
        onFileAdd(storedFileData);
        console.log('TS-PW file added via onFileAdd callback');
        addMessage(`${fileName} stored in Combined Excel Manager`, 'success');
        return storedFileData;
      }

      addMessage('File generated but could not be stored', 'warning');
      return null;
    } catch (error) {
      console.error('Error storing TS-PW file:', error);
      addMessage(`Error storing file: ${error.message}`, 'error');
      return null;
    }
  }, [fiscalInfo, tsPwData, addMessage, onFileAdd, setStoredFiles]);

  // Auto-generate and store combined Excel file
  const autoGenerateTsPwReport = useCallback(async () => {
    if (!autoExportEnabled) {
      console.log('Auto-export disabled, skipping auto-generation');
      return;
    }
    
    const hasMtData = tsPwData.mt_data && tsPwData.mt_data.length > 0;
    const hasValueData = tsPwData.value_data && tsPwData.value_data.length > 0;
    
    if (!hasMtData && !hasValueData) {
      console.log('No data available for auto-generation');
      return;
    }

    console.log('Auto-generating TS-PW report...');

    try {
      const timestamp = new Date().toISOString().slice(0, 19).replace(/[:-]/g, '');
      const fileName = `tspw_auto_combined_${tsPwData.fiscal_year || 'report'}_${timestamp}.xlsx`;

      const response = await fetch(`${API_BASE_URL}/ts-pw/export-combined-ts-pw-excel`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          mt_data: tsPwData.mt_data || [],
          value_data: tsPwData.value_data || [],
          mt_columns: tsPwData.columns.mt || [],
          value_columns: tsPwData.columns.value || [],
          fiscal_year: tsPwData.fiscal_year,
          auto_generated: true
        })
      });

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      const result = await response.json();
      
      if (result.success) {
        const byteCharacters = atob(result.data);
        const byteNumbers = new Array(byteCharacters.length);
        for (let i = 0; i < byteCharacters.length; i++) {
          byteNumbers[i] = byteCharacters.charCodeAt(i);
        }
        const byteArray = new Uint8Array(byteNumbers);
        const blob = new Blob([byteArray], { 
          type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' 
        });

        const fileDescription = `Auto-generated combined TS-PW analysis with MT (${hasMtData ? tsPwData.mt_data.length : 0} records) and Value (${hasValueData ? tsPwData.value_data.length : 0} records) for fiscal year ${tsPwData.fiscal_year}`;
        await storeFileInSession(blob, fileName, 'combined-auto', fileDescription);
        
        addMessage(`Auto-generated: ${fileName}`, 'success');
        setHasAutoGenerated(true);
        return { success: true, filename: fileName };
      }
    } catch (error) {
      console.error('Auto-generation error:', error);
      addMessage(`Auto-generation error: ${error.message}`, 'error');
      return { success: false, error: error.message };
    }
  }, [autoExportEnabled, tsPwData, storeFileInSession, addMessage]);

  // Auto-generate when both tables are available
  useEffect(() => {
    if (autoExportEnabled && tsPwData.mt_data && tsPwData.value_data && !hasAutoGenerated) {
      const timer = setTimeout(() => {
        autoGenerateTsPwReport();
      }, 2000); // 2 second delay after processing completes
      
      return () => clearTimeout(timer);
    }
  }, [tsPwData.mt_data, tsPwData.value_data, autoExportEnabled, hasAutoGenerated, autoGenerateTsPwReport]);

  const handleAnalysisSuccess = useCallback((result) => {
    console.log('TS-PW Analysis Success:', {
      mtResult: !!result.data.mt_data,
      valueResult: !!result.data.value_data,
      onFileAdd: typeof onFileAdd,
      setStoredFiles: typeof setStoredFiles,
      autoExportEnabled,
      currentStoredFiles: storedFiles.length
    });

    setTsPwData(result.data);
    
    // Extract fiscal info
    const resultFiscalInfo = {
      current_year: result.data.fiscal_year || '25-26'
    };
    setFiscalInfo(resultFiscalInfo);

    setHasAutoGenerated(false);
    
    // Auto-switch to available tab
    if (result.data.value_data && result.data.value_data.length > 0) {
      setActiveSubTab('value');
    } else if (result.data.mt_data && result.data.mt_data.length > 0) {
      setActiveSubTab('mt');
    }
    
    const mtRows = result.data.shape.mt[0];
    const valueRows = result.data.shape.value[0];
    
    if (mtRows > 0 && valueRows > 0) {
      addMessage(`TS-PW analysis completed successfully - MT: ${mtRows} rows, Value: ${valueRows} rows`, 'success');
    } else if (mtRows > 0) {
      addMessage(`TS-PW analysis completed - MT: ${mtRows} rows (Value data not available)`, 'success');
    } else if (valueRows > 0) {
      addMessage(`TS-PW analysis completed - Value: ${valueRows} rows (MT data not available)`, 'success');
    } else {
      addMessage('TS-PW analysis completed but no data was generated. Please check your input files.', 'warning');
    }
  }, [addMessage, autoExportEnabled, onFileAdd, setStoredFiles, storedFiles.length]);

  const processTsPwData = useCallback(async () => {
    if (!canProcess()) {
      addMessage('Budget file and sheet selection are required for TS-PW analysis', 'error');
      return;
    }

    setProcessing(true);
    setLoading(true);
    
    try {
      const requestData = {
        budget_filepath: uploadedFiles.budget.filepath,
        budget_sheet: selectedSheets.budget,
        sales_filepath: uploadedFiles.sales?.filepath || null,
        sales_sheets: selectedSheets.sales ? [selectedSheets.sales] : [],
        last_year_filepath: uploadedFiles.totalSales?.filepath || null,
        last_year_sheet: selectedSheets.totalSales || null
      };

      addMessage('Processing TS-PW analysis...', 'info');

      const response = await fetch(`${API_BASE_URL}/ts-pw/process-ts-pw`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(requestData)
      });

      const result = await response.json();

      if (result.success) {
        handleAnalysisSuccess(result);
      } else {
        addMessage(result.error || 'TS-PW processing failed', 'error');
      }
    } catch (error) {
      addMessage(`TS-PW processing error: ${error.message}`, 'error');
    } finally {
      setLoading(false);
      setProcessing(false);
    }
  }, [canProcess, uploadedFiles, selectedSheets, addMessage, setLoading, handleAnalysisSuccess]);

  // Auto-process on data availability
  useEffect(() => {
    const timer = setTimeout(() => {
      if (canProcess() && !processing && !tsPwData.mt_data && !tsPwData.value_data) {
        console.log('Auto-processing TS-PW analysis...');
        processTsPwData();
      }
    }, 1000);

    return () => clearTimeout(timer);
  }, [uploadedFiles, selectedSheets, canProcess, processTsPwData, processing, tsPwData]);

  // FIXED: Updated generateTsPwReport function to use correct endpoint
  const generateTsPwReport = async (shouldStore = true) => {
    if (!tsPwData.mt_data && !tsPwData.value_data) {
      addMessage('No data available for report generation', 'error');
      return;
    }

    setLoading(true);
    try {
      // Use the correct endpoint that exists in your backend
      const response = await fetch(`${API_BASE_URL}/ts-pw/export-combined-ts-pw-excel`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          mt_data: tsPwData.mt_data || [],
          value_data: tsPwData.value_data || [],
          mt_columns: tsPwData.columns.mt || [],
          value_columns: tsPwData.columns.value || [],
          fiscal_year: fiscalInfo.current_year || tsPwData.fiscal_year
        })
      });

      const result = await response.json();

      if (result.success) {
        const byteCharacters = atob(result.data);
        const byteNumbers = new Array(byteCharacters.length);
        for (let i = 0; i < byteCharacters.length; i++) {
          byteNumbers[i] = byteCharacters.charCodeAt(i);
        }
        const byteArray = new Uint8Array(byteNumbers);
        const blob = new Blob([byteArray], { 
          type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' 
        });

        if (shouldStore) {
          const fileDescription = `Comprehensive TS-PW analysis report with insights, MT (${tsPwData.mt_data?.length || 0} records) and Value (${tsPwData.value_data?.length || 0} records) analysis for fiscal year ${fiscalInfo.current_year || tsPwData.fiscal_year}`;
          await storeFileInSession(blob, result.filename, 'report', fileDescription);
        }

        const url = URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = result.filename;
        document.body.appendChild(a);
        a.click();
        document.body.removeChild(a);
        URL.revokeObjectURL(url);

        addMessage(`TS-PW Report ${shouldStore ? 'downloaded and stored' : 'downloaded'}: ${result.filename}`, 'success');
      } else {
        addMessage(result.error || 'Report generation failed', 'error');
      }
    } catch (error) {
      addMessage(`Report generation error: ${error.message}`, 'error');
    } finally {
      setLoading(false);
    }
  };

  const formatNumber = (value) => {
    if (typeof value === 'number') {
      return value.toLocaleString('en-IN', { 
        minimumFractionDigits: 2, 
        maximumFractionDigits: 2 
      });
    }
    return value;
  };

  // Get TS-PW specific files from global storage
  const getTsPwFiles = () => {
    return storedFiles.filter(f => f.type && f.type.includes('tspw'));
  };

  const getRowClassName = (tsPwName) => {
    const name = (tsPwName || '').toString().toUpperCase();
    if (name.includes('TOTAL')) return 'total-row';
    return '';
  };

  const DataTable = ({ data, title, analysisType, showTsPwHighlights = true }) => {
    if (!data || !data.length) return null;

    const columns = tsPwData.columns[analysisType] || [];

    const tsPwColumnNames = ['TS-PW', 'TSPW', 'Product', 'Product Name', 'SALES in Tonage', 'SALES in Value'];
    let tsPwColumn = columns[0];
    
    for (const colName of tsPwColumnNames) {
      if (columns.includes(colName)) {
        tsPwColumn = colName;
        break;
      }
    }

    return (
      <div className="data-preview">
        <div className="preview-header">
          <h4>{title}</h4>
        </div>
        
        <div className="table-container">
          <table className="data-table">
            <thead>
              <tr>
                {columns.map((col, index) => (
                  <th key={index} className={col === tsPwColumn ? 'tspw-header' : 'data-header'}>{col}</th>
                ))}
              </tr>
            </thead>
            <tbody>
              {data.slice(0, 100).map((row, rowIndex) => {
                const rowClass = getRowClassName(row[tsPwColumn]);
                return (
                  <tr key={rowIndex} className={`${rowClass} ${
                    (row[tsPwColumn] || '').toString().toUpperCase().includes('TOTAL') ? 'total-row' : ''
                  }`}>
                    {columns.map((col, colIndex) => {
                      const value = row[col];
                      const isNumeric = typeof value === 'number' && !isNaN(value);
                      const formattedValue = isNumeric ? formatNumber(value) : (value || '');
                      
                      return (
                        <td 
                          key={colIndex} 
                          className={`${col === tsPwColumn ? 'tspw-cell' : 'data-cell'} ${isNumeric ? 'numeric' : ''}`}
                        >
                          {formattedValue}
                        </td>
                      );
                    })}
                  </tr>
                );
              })}
            </tbody>
          </table>
        </div>
        
        {data.length > 100 && (
          <div className="table-note">
            Showing first 100 rows of {data.length} total rows
          </div>
        )}
      </div>
    );
  };

  const AutoExportToggle = () => (
    <div className="auto-export-control">
      <label className="toggle-label">
        <input
          type="checkbox"
          checked={autoExportEnabled}
          onChange={(e) => {
            setAutoExportEnabled(e.target.checked);
            setHasAutoGenerated(false);
          }}
          className="toggle-input"
        />
        <span className="toggle-switch"></span>
        Auto-generate Excel file
      </label>
      <small className="toggle-help">
        Automatically generate combined TS-PW Excel file with both tables
      </small>
    </div>
  );

  const TablesPreviewTab = () => {
    const tsPwFiles = getTsPwFiles();
    
    return (
      <div className="tables-preview-section">
        <div className="table-section">
          <div className="table-section-header">
            <h4>TS-PW SALES in Quantity</h4>
            <div className="table-status">
              {tsPwData.mt_data ? (
                <span className="status-badge available">Available ({tsPwData.shape.mt[0]} records)</span>
              ) : (
                <span className="status-badge unavailable">Not Available</span>
              )}
            </div>
          </div>

          {tsPwData.mt_data ? (
            <DataTable
              data={tsPwData.mt_data}
              title={`TS-PW Monthly Budget and Actual Quantity (NORTH) [${fiscalInfo.current_year || tsPwData.fiscal_year || '25-26'}]`}
              analysisType="mt"
            />
          ) : (
            <div className="table-empty-state">
              <h4>No TS-PW MT Data Available</h4>
              <p>
                {!canProcess() ? 
                  "Upload Budget file to start analysis" :
                  "Click 'Refresh Analysis' to generate MT data"
                }
              </p>
            </div>
          )}
        </div>

        <div className="table-separator"></div>

        <div className="table-section">
          <div className="table-section-header">
            <h4>TS-PW SALES in Value</h4>
            <div className="table-status">
              {tsPwData.value_data ? (
                <span className="status-badge available">Available ({tsPwData.shape.value[0]} records)</span>
              ) : (
                <span className="status-badge unavailable">Not Available</span>
              )}
            </div>
          </div>

          {tsPwData.value_data ? (
            <DataTable
              data={tsPwData.value_data}
              title={`TS-PW Monthly Budget and Actual Value (NORTH) [${fiscalInfo.current_year || tsPwData.fiscal_year || '25-26'}]`}
              analysisType="value"
            />
          ) : (
            <div className="table-empty-state">
              <h4>No TS-PW Value Data Available</h4>
              <p>
                {!canProcess() ? 
                  "Upload Budget file to start analysis" :
                  "Click 'Refresh Analysis' to generate Value data"
                }
              </p>
            </div>
          )}
        </div>

        <div className="tables-summary">
          {(tsPwData.mt_data || tsPwData.value_data) && (
            <div className="export-merged-section">
              <div className="export-actions">
                <button
                  onClick={() => generateTsPwReport(false)}
                  className="btn btn-primary btn-large"
                  disabled={loading}
                  title="Download comprehensive TS-PW analysis report"
                >
                  <Download size={16} />
                  {loading ? 'Processing...' : 'Download TS-PW Report'}
                </button>
              </div>
            </div>
          )}
        </div>
      </div>
    );
  };

  return (
    <div className="tspw-analysis-section">
      <div className="section-header">
        <h1>TS-PW Analysis (NORTH)</h1>
        <div className="header-actions">
          <button
            onClick={processTsPwData}
            className="btn btn-primary"
            disabled={!canProcess() || loading || processing}
          >
            {processing ? <RefreshCw size={16} className="spin" /> : null}
            {processing ? 'Processing...' : 'Refresh Analysis'}
          </button>

          {storedFiles.some(f => f.type && f.type.includes('tspw')) && (
            <div className="integration-status-badge">
              <span>Latest file stored</span>
            </div>
          )}
        </div>
      </div>

      <div className="stats-overview">
        <div className="stat-card">
          <div className="stat-content">
            <span className="stat-number">{tsPwData.shape.mt[0]}</span>
            <span className="stat-label">TS-PW MT Records</span>
          </div>
        </div>
        <div className="stat-card">
          <div className="stat-content">
            <span className="stat-number">{tsPwData.shape.value[0]}</span>
            <span className="stat-label">TS-PW Value Records</span>
          </div>
        </div>
        <div className="stat-card">
          <div className="stat-content">
            <span className="stat-number">
              {storedFiles.filter(f => f.type && f.type.includes('tspw')).length > 0 ? '1' : '0'}
            </span>
            <span className="stat-label">Stored Files</span>
          </div>
        </div>
      </div>

      <nav className="sub-tab-navigation">
        <button
          className={`sub-tab ${activeSubTab === 'mt' ? 'active' : ''}`}
          onClick={() => setActiveSubTab('mt')}
          disabled={!tsPwData.mt_data && !processing}
        >
          SALES in MT
          {tsPwData.mt_data && <span className="data-indicator"></span>}
        </button>
        <button
          className={`sub-tab ${activeSubTab === 'value' ? 'active' : ''}`}
          onClick={() => setActiveSubTab('value')}
          disabled={!tsPwData.value_data && !processing}
        >
          SALES in Value
          {tsPwData.value_data && <span className="data-indicator"></span>}
        </button>
        <button
          className={`sub-tab ${activeSubTab === 'tables' ? 'active' : ''}`}
          onClick={() => setActiveSubTab('tables')}
        >
          <Eye size={16} />
          Tables Preview
          {storedFiles.some(f => f.type && f.type.includes('tspw')) && <span className="data-indicator"></span>}
        </button>
      </nav>

      <div className="sub-tab-content">
        {activeSubTab === 'mt' && (
          <div className="mt-analysis">
            {tsPwData.mt_data ? (
              <DataTable
                data={tsPwData.mt_data}
                title={`TS-PW Monthly Budget and Actual Tonnage (NORTH) [${fiscalInfo.current_year || tsPwData.fiscal_year || '25-26'}]`}
                analysisType="mt"
              />
            ) : (
              <div className="empty-state">
                <h3>No MT analysis data</h3>
                <p>
                  {!canProcess() ? 
                    "Upload Budget file to start analysis" :
                    "Click 'Refresh Analysis' to generate MT data"
                  }
                </p>
                {canProcess() && (
                  <button
                    onClick={processTsPwData}
                    className="btn btn-primary"
                    disabled={loading || processing}
                  >
                    Generate MT Analysis
                  </button>
                )}
              </div>
            )}
          </div>
        )}

        {activeSubTab === 'value' && (
          <div className="value-analysis">
            {tsPwData.value_data ? (
              <DataTable
                data={tsPwData.value_data}
                title={`TS-PW Monthly Budget and Actual Value (NORTH) [${fiscalInfo.current_year || tsPwData.fiscal_year || '25-26'}]`}
                analysisType="value"
              />
            ) : (
              <div className="empty-state">
                <h3>No Value analysis data</h3>
                <p>
                  {!canProcess() ? 
                    "Upload Budget file to start analysis" :
                    "Click 'Refresh Analysis' to generate Value data"
                  }
                </p>
                {canProcess() && (
                  <button
                    onClick={processTsPwData}
                    className="btn btn-primary"
                    disabled={loading || processing}
                  >
                    Generate Value Analysis
                  </button>
                )}
              </div>
            )}
          </div>
        )}

        {activeSubTab === 'tables' && <TablesPreviewTab />}
      </div>

      {processing && (
        <div className="processing-indicator">
          <RefreshCw size={24} className="spin" />
          <span>Processing TS-PW analysis...</span>
        </div>
      )}

      <style jsx>{`
        .tspw-analysis-section {
          padding: 32px;
          font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen', 'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue', sans-serif;
          background-color: #f8fafc;
          min-height: 100vh;
        }

        .section-header {
          display: flex;
          justify-content: space-between;
          align-items: center;
          margin-bottom: 32px;
          background: white;
          padding: 16px 24px;
          border-radius: 8px;
          box-shadow: 0 1px 3px rgba(0,0,0,0.12), 0 1px 2px rgba(0,0,0,0.24);
        }

        .section-header h1 {
          margin: 0;
          color: #1e293b;
          font-size: 24px;
          font-weight: 700;
          letter-spacing: -0.025em;
        }

        .header-actions {
          display: flex;
          gap: 16px;
          align-items: center;
        }

        .integration-status-badge {
          display: none;
        }

        .stats-overview {
          display: grid;
          grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
          gap: 16px;
          margin-bottom: 32px;
        }

        .stat-card {
          background: white;
          padding: 16px 20px;
          border-radius: 8px;
          box-shadow: 0 1px 3px rgba(0,0,0,0.12), 0 1px 2px rgba(0,0,0,0.24);
          transition: all 0.3s ease;
          border-left: 3px solid #3b82f6;
        }

        .stat-card:hover {
          transform: translateY(-1px);
          box-shadow: 0 4px 6px rgba(0,0,0,0.12), 0 2px 4px rgba(0,0,0,0.06);
        }

        .stat-content {
          display: flex;
          flex-direction: column;
          gap: 4px;
        }

        .stat-number {
          font-size: 24px;
          font-weight: 700;
          color: #1e293b;
          line-height: 1;
        }

        .stat-label {
          font-size: 12px;
          color: #64748b;
          text-transform: uppercase;
          letter-spacing: 0.05em;
          font-weight: 600;
        }

        .sub-tab-navigation {
          display: flex;
          background: white;
          border-radius: 12px;
          box-shadow: 0 1px 3px rgba(0,0,0,0.12), 0 1px 2px rgba(0,0,0,0.24);
          overflow: hidden;
          margin-bottom: 32px;
        }

        .sub-tab {
          display: flex;
          align-items: center;
          gap: 12px;
          padding: 20px 32px;
          background: none;
          border: none;
          border-bottom: 3px solid transparent;
          cursor: pointer;
          font-size: 16px;
          font-weight: 600;
          color: #64748b;
          transition: all 0.3s ease;
          flex: 1;
          justify-content: center;
          position: relative;
        }

        .sub-tab:hover:not(:disabled) {
          color: #1e293b;
          background: #f8fafc;
        }

        .sub-tab.active {
          color: #3b82f6;
          border-bottom-color: #3b82f6;
          background: white;
        }

        .sub-tab:disabled {
          opacity: 0.5;
          cursor: not-allowed;
        }

        .data-indicator {
          width: 8px;
          height: 8px;
          background: #10b981;
          border-radius: 50%;
          animation: pulse 2s infinite;
        }

        @keyframes pulse {
          0%, 100% { opacity: 1; }
          50% { opacity: 0.5; }
        }

        .sub-tab-content {
          min-height: 400px;
        }

        .auto-export-control {
          margin-top: 32px;
          padding: 24px;
          background: white;
          border-radius: 12px;
          box-shadow: 0 1px 3px rgba(0,0,0,0.12), 0 1px 2px rgba(0,0,0,0.24);
        }

        .toggle-label {
          display: flex;
          align-items: center;
          gap: 16px;
          cursor: pointer;
          font-size: 16px;
          font-weight: 600;
          color: #1e293b;
        }

        .toggle-input {
          display: none;
        }

        .toggle-switch {
          position: relative;
          width: 52px;
          height: 28px;
          background: #cbd5e1;
          border-radius: 14px;
          transition: background 0.3s ease;
        }

        .toggle-switch::before {
          content: '';
          position: absolute;
          top: 2px;
          left: 2px;
          width: 24px;
          height: 24px;
          background: white;
          border-radius: 50%;
          transition: transform 0.3s ease;
          box-shadow: 0 2px 4px rgba(0,0,0,0.2);
        }

        .toggle-input:checked + .toggle-switch {
          background: #3b82f6;
        }

        .toggle-input:checked + .toggle-switch::before {
          transform: translateX(24px);
        }

        .toggle-help {
          display: block;
          margin-top: 12px;
          color: #64748b;
          font-size: 14px;
          font-weight: 400;
          line-height: 1.5;
        }

        .tables-preview-section {
          padding: 0;
        }

        .table-section {
          margin-bottom: 32px;
          border: 1px solid #e2e8f0;
          border-radius: 12px;
          overflow: hidden;
          background: white;
          box-shadow: 0 1px 3px rgba(0,0,0,0.12), 0 1px 2px rgba(0,0,0,0.24);
        }

        .table-section-header {
          display: flex;
          justify-content: space-between;
          align-items: center;
          padding: 24px 32px;
          background: #f8fafc;
          border-bottom: 1px solid #e2e8f0;
        }

        .table-section-header h4 {
          margin: 0;
          color: #1e293b;
          font-size: 20px;
          font-weight: 700;
        }

        .table-status {
          display: flex;
          align-items: center;
        }

        .status-badge {
          padding: 8px 16px;
          border-radius: 20px;
          font-size: 14px;
          font-weight: 600;
          border: 1px solid;
        }

        .status-badge.available {
          background: #d1fae5;
          color: #065f46;
          border-color: #a7f3d0;
        }

        .status-badge.unavailable {
          background: #fee2e2;
          color: #991b1b;
          border-color: #fecaca;
        }

        .table-empty-state {
          text-align: center;
          padding: 80px 32px;
          color: #64748b;
        }

        .table-empty-state h4 {
          margin: 0 0 16px;
          color: #1e293b;
          font-size: 24px;
          font-weight: 700;
        }

        .table-empty-state p {
          color: #64748b;
          max-width: 500px;
          margin: 0 auto 24px;
          line-height: 1.6;
          font-size: 16px;
        }

        .table-separator {
          height: 24px;
        }

        .tables-summary {
          background: white;
          border: 1px solid #e2e8f0;
          border-radius: 12px;
          padding: 32px;
          margin-top: 32px;
          box-shadow: 0 1px 3px rgba(0,0,0,0.12), 0 1px 2px rgba(0,0,0,0.24);
        }

        .export-merged-section {
          padding: 24px;
          background: #f8fafc;
          border: 2px dashed #3b82f6;
          border-radius: 12px;
          text-align: center;
        }

        .export-actions {
          display: flex;
          gap: 16px;
          justify-content: center;
          flex-wrap: wrap;
        }

        .empty-state {
          display: flex;
          flex-direction: column;
          align-items: center;
          justify-content: center;
          padding: 80px 32px;
          text-align: center;
          background: white;
          border-radius: 12px;
          box-shadow: 0 1px 3px rgba(0,0,0,0.12), 0 1px 2px rgba(0,0,0,0.24);
        }

        .empty-state h3 {
          margin: 0 0 16px;
          font-size: 24px;
          color: #1e293b;
          font-weight: 700;
        }

        .empty-state p {
          margin: 0 0 24px;
          font-size: 16px;
          color: #64748b;
          max-width: 400px;
          line-height: 1.6;
        }

        .data-preview {
          background: white;
          border-radius: 0;
          overflow: hidden;
        }

        .preview-header {
          display: flex;
          justify-content: space-between;
          align-items: center;
          padding: 24px 32px;
          background: #f8fafc;
          border-bottom: 1px solid #e2e8f0;
        }

        .preview-header h4 {
          margin: 0;
          font-size: 18px;
          font-weight: 700;
          color: #1e293b;
        }

        .table-container {
          overflow-x: auto;
          max-height: 600px;
          overflow-y: auto;
        }

        .data-table {
          width: 100%;
          border-collapse: collapse;
          font-size: 14px;
        }

        .data-table th {
          background: #f8fafc;
          color: #374151;
          padding: 16px 12px;
          text-align: left;
          font-weight: 700;
          position: sticky;
          top: 0;
          z-index: 10;
          border-bottom: 2px solid #e2e8f0;
          border-right: 1px solid #e2e8f0;
        }

        .tspw-header {
          background: #1e40af !important;
          color: white !important;
          min-width: 200px;
          position: sticky;
          left: 0;
          z-index: 11;
        }

        .data-header {
          text-align: center !important;
          min-width: 100px;
        }

        .data-table td {
          padding: 12px;
          border-bottom: 1px solid #f1f5f9;
          border-right: 1px solid #f1f5f9;
          white-space: nowrap;
        }

        .tspw-cell {
          font-weight: 600;
          color: #1e293b;
          background: #f8fafc;
          position: sticky;
          left: 0;
          z-index: 5;
          border-right: 2px solid #1e40af;
          min-width: 200px;
        }

        .data-cell {
          font-family: 'SF Mono', 'Monaco', 'Inconsolata', 'Roboto Mono', monospace;
          font-size: 14px;
          text-align: right;
        }

        .data-cell.numeric {
          text-align: right;
        }

        .total-row {
          background: #dcfce7 !important;
          font-weight: 600;
        }

        .total-row .tspw-cell {
          background: #22c55e !important;
          color: white !important;
          font-weight: 800;
        }

        .data-table tr:hover {
          background: #f8fafc;
        }

        .data-table tr:hover .tspw-cell {
          background: #e2e8f0;
        }

        .data-table tr.total-row:hover .tspw-cell {
          opacity: 0.9;
        }

        .table-note {
          padding: 16px 32px;
          background: #f8fafc;
          border-top: 1px solid #e2e8f0;
          font-size: 14px;
          color: #64748b;
          text-align: center;
        }

        .processing-indicator {
          display: flex;
          align-items: center;
          justify-content: center;
          gap: 12px;
          padding: 48px;
          color: #64748b;
          background: white;
          border-radius: 12px;
          margin: 32px 0;
          box-shadow: 0 1px 3px rgba(0,0,0,0.12), 0 1px 2px rgba(0,0,0,0.24);
          font-size: 16px;
          font-weight: 600;
        }

        .btn {
          display: inline-flex;
          align-items: center;
          gap: 12px;
          padding: 12px 24px;
          border: none;
          border-radius: 8px;
          font-size: 16px;
          font-weight: 600;
          cursor: pointer;
          transition: all 0.3s ease;
          text-decoration: none;
          font-family: inherit;
        }

        .btn:disabled {
          opacity: 0.6;
          cursor: not-allowed;
          transform: none !important;
        }

        .btn-primary {
          background: #3b82f6;
          color: white;
          box-shadow: 0 4px 6px rgba(59, 130, 246, 0.25);
        }

        .btn-primary:hover:not(:disabled) {
          background: #2563eb;
          transform: translateY(-1px);
          box-shadow: 0 6px 8px rgba(59, 130, 246, 0.3);
        }

        .btn-large {
          padding: 16px 32px;
          font-size: 18px;
          font-weight: 700;
        }

        @keyframes spin {
          from { transform: rotate(0deg); }
          to { transform: rotate(360deg); }
        }

        .spin {
          animation: spin 1s linear infinite;
        }

        @media (max-width: 1024px) {
          .tspw-analysis-section {
            padding: 24px;
          }

          .export-actions {
            flex-direction: column;
            align-items: stretch;
          }
        }

        @media (max-width: 768px) {
          .tspw-analysis-section {
            padding: 16px;
          }

          .section-header {
            flex-direction: column;
            gap: 20px;
            align-items: stretch;
            text-align: center;
            padding: 12px 16px;
          }

          .section-header h1 {
            font-size: 20px;
          }

          .stats-overview {
            grid-template-columns: 1fr;
          }

          .sub-tab-navigation {
            flex-direction: column;
          }

          .sub-tab {
            justify-content: center;
            padding: 16px 24px;
          }

          .table-section-header {
            flex-direction: column;
            gap: 16px;
            align-items: stretch;
            text-align: center;
            padding: 20px;
          }

          .export-actions {
            flex-direction: column;
            align-items: stretch;
          }

          .data-table th.tspw-header,
          .data-table td.tspw-cell {
            min-width: 150px;
          }

          .toggle-label {
            flex-direction: column;
            align-items: flex-start;
            gap: 12px;
          }
        }

        @media (max-width: 480px) {
          .tspw-analysis-section {
            padding: 12px;
          }

          .section-header {
            padding: 10px 12px;
          }

          .section-header h1 {
            font-size: 18px;
          }

          .stat-card {
            padding: 24px;
          }

          .stat-number {
            font-size: 32px;
          }

          .sub-tab {
            padding: 14px 20px;
            font-size: 14px;
          }

          .auto-export-control {
            padding: 20px;
          }

          .tables-summary {
            padding: 20px;
          }

          .data-table {
            font-size: 13px;
          }

          .data-table th,
          .data-table td {
            padding: 10px 8px;
          }

          .btn {
            padding: 10px 20px;
            font-size: 14px;
          }

          .btn-large {
            padding: 14px 28px;
            font-size: 16px;
          }

          .export-merged-section {
            padding: 20px;
          }
        }
      `}</style>
    </div>
  );
};

export default TSPWAnalysis;
