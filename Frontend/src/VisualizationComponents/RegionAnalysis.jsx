import React, { useState, useEffect, useCallback } from 'react';
import { 
  Download,
  RefreshCw,
  Eye
} from 'lucide-react';

const API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';

const RegionAnalysis = ({ 
  uploadedFiles, 
  selectedSheets, 
  addMessage, 
  loading, 
  setLoading,
  onAnalysisComplete,
  storedFiles = [],
  setStoredFiles = () => {},
  onFileAdd = () => {}
}) => {
  const [activeSubTab, setActiveSubTab] = useState('mt');
  const [regionData, setRegionData] = useState({
    mt: null,
    value: null
  });
  const [processing, setProcessing] = useState(false);
  const [fiscalInfo, setFiscalInfo] = useState({});
  const [autoExportEnabled, setAutoExportEnabled] = useState(true);
  const [hasAutoGenerated, setHasAutoGenerated] = useState(false);

  useEffect(() => {
    console.log('🔍 RegionAnalysis Props Check:', {
      storedFiles: storedFiles.length,
      setStoredFiles: typeof setStoredFiles,
      onFileAdd: typeof onFileAdd,
      autoExportEnabled
    });
  }, [storedFiles, setStoredFiles, onFileAdd, autoExportEnabled]);

  const canProcess = useCallback(() => {
    return uploadedFiles.budget && 
           selectedSheets.budget && 
           uploadedFiles.sales && 
           selectedSheets.sales;
  }, [uploadedFiles.budget, uploadedFiles.sales, selectedSheets.budget, selectedSheets.sales]);

  const storeFileInSession = useCallback(async (fileBlob, fileName, analysisType, fileDescription) => {
    try {
      const timestamp = new Date().toISOString();
      const fileUrl = URL.createObjectURL(fileBlob);
      
      const storedFileData = {
        id: `region_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
        name: fileName,
        blob: fileBlob,
        size: fileBlob.size,
        url: fileUrl,
        createdAt: timestamp,
        fiscalYear: fiscalInfo.current_year || 'N/A',
        type: `region-${analysisType}`,
        source: 'Region Analysis',
        description: fileDescription,
        mtRecords: analysisType === 'mt' || analysisType.includes('combined') ? 
          (regionData.mt?.data?.length || 0) : 0,
        valueRecords: analysisType === 'value' || analysisType.includes('combined') ? 
          (regionData.value?.data?.length || 0) : 0,
        sheets: analysisType.includes('combined') ? 
          ['Combined Region Analysis'] :
          analysisType === 'report' ?
          ['Executive Summary', 'Region_MT_Analysis', 'Region_Value_Analysis', 'Combined_Analysis'] :
          [`Region ${analysisType.toUpperCase()} Analysis`],
        analysisType: analysisType,
        metadata: {
          singleSheet: analysisType.includes('single-sheet'),
          bothTables: analysisType.includes('combined'),
          columnOrdered: true,
          fiscalYear: fiscalInfo.current_year,
          analysisType: 'region',
          isReport: analysisType === 'report',
          autoGenerated: analysisType.includes('auto'),
          integration: {
            combined_data_ready: true,
            sync_status: 'ready'
          }
        },
        tags: ['region', 'analysis', analysisType.includes('combined') ? 'combined' : 'individual']
      };

      console.log('🔄 Storing Region file (replacing previous):', {
        fileName,
        analysisType,
        fileSize: fileBlob.size
      });

      if (typeof setStoredFiles === 'function') {
        setStoredFiles(prev => {
          const oldRegionFiles = prev.filter(f => f.type && f.type.includes('region'));
          oldRegionFiles.forEach(file => {
            if (file.url) {
              URL.revokeObjectURL(file.url);
            }
          });
          
          const otherFiles = prev.filter(f => !f.type || !f.type.includes('region'));
          return [storedFileData, ...otherFiles];
        });
        
        console.log('✅ Region file replaced (keeping only latest)');
        addMessage(`💾 ${fileName} stored (previous Region file replaced)`, 'success');
        return storedFileData;
      }
      
      if (typeof onFileAdd === 'function') {
        onFileAdd(storedFileData);
        console.log('✅ Region file added via onFileAdd callback');
        addMessage(`💾 ${fileName} stored in Combined Excel Manager`, 'success');
        return storedFileData;
      }

      addMessage('⚠️ File generated but could not be stored', 'warning');
      return null;
    } catch (error) {
      console.error('❌ Error storing Region file:', error);
      addMessage(`❌ Error storing file: ${error.message}`, 'error');
      return null;
    }
  }, [regionData, fiscalInfo, addMessage, onFileAdd, setStoredFiles]);

  const autoGenerateRegionReport = useCallback(async () => {
    if (!autoExportEnabled) {
      console.log('🚫 Auto-export disabled, skipping auto-generation');
      return;
    }
    
    const hasMtData = regionData.mt && regionData.mt.data && regionData.mt.data.length > 0;
    const hasValueData = regionData.value && regionData.value.data && regionData.value.data.length > 0;
    
    if (!hasMtData && !hasValueData) {
      console.log('🚫 No data available for auto-generation');
      return;
    }

    console.log('🤖 Auto-generating Region report...');

    try {
      const timestamp = new Date().toISOString().slice(0, 19).replace(/[:-]/g, '');
      const fileName = `region_auto_combined_${fiscalInfo.current_year || 'report'}_${timestamp}.xlsx`;

      const response = await fetch(`${API_BASE_URL}/region/download-combined-single-sheet`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          mt_data: regionData.mt?.data || [],
          value_data: regionData.value?.data || [],
          mt_columns: regionData.mt?.columns || [],
          value_columns: regionData.value?.columns || [],
          fiscal_year: fiscalInfo.current_year || '',
          include_both_tables: true,
          single_sheet: true,
          auto_generated: true
        })
      });

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      const blob = await response.blob();
      
      const fileDescription = `Auto-generated combined region-wise analysis with MT (${hasMtData ? regionData.mt.data.length : 0} records) and Value (${hasValueData ? regionData.value.data.length : 0} records) for fiscal year ${fiscalInfo.current_year}`;
      await storeFileInSession(blob, fileName, 'combined-auto', fileDescription);
      
      addMessage(`🤖 Auto-generated: ${fileName}`, 'success');
      setHasAutoGenerated(true);
      return { success: true, filename: fileName };
    } catch (error) {
      console.error('❌ Auto-generation error:', error);
      addMessage(`❌ Auto-generation error: ${error.message}`, 'error');
      return { success: false, error: error.message };
    }
  }, [autoExportEnabled, addMessage, regionData, storeFileInSession, fiscalInfo]);

  useEffect(() => {
    if (autoExportEnabled && regionData.mt && regionData.value && !hasAutoGenerated) {
      const timer = setTimeout(() => {
        autoGenerateRegionReport();
      }, 2000);
      
      return () => clearTimeout(timer);
    }
  }, [regionData.mt, regionData.value, autoExportEnabled, hasAutoGenerated, autoGenerateRegionReport]);

  const handleAnalysisSuccess = useCallback((mtResult, valueResult, resultFiscalInfo) => {
    console.log('🎯 Region Analysis Success:', {
      mtResult: !!mtResult,
      valueResult: !!valueResult,
      onFileAdd: typeof onFileAdd,
      setStoredFiles: typeof setStoredFiles,
      autoExportEnabled,
      currentStoredFiles: storedFiles.length
    });

    setRegionData(prev => ({
      ...prev,
      mt: mtResult,
      value: valueResult
    }));
    
    if (resultFiscalInfo) {
      setFiscalInfo(resultFiscalInfo);
    }

    setHasAutoGenerated(false);

    if (onAnalysisComplete) {
      onAnalysisComplete({
        mt_data: mtResult?.data,
        value_data: valueResult?.data,
        columns: {
          mt_columns: mtResult?.columns,
          value_columns: valueResult?.columns
        },
        fiscal_year: resultFiscalInfo?.current_year
      });
    }

    const mtRows = mtResult?.data?.length || 0;
    const valueRows = valueResult?.data?.length || 0;
    
    if (mtRows > 0 && valueRows > 0) {
      addMessage(`✅ Region analysis completed successfully - MT: ${mtRows} regions, Value: ${valueRows} regions`, 'success');
    } else if (mtRows > 0) {
      addMessage(`✅ Region analysis completed - MT: ${mtRows} regions (Value data not available)`, 'success'); 
    } else if (valueRows > 0) {
      addMessage(`✅ Region analysis completed - Value: ${valueRows} regions (MT data not available)`, 'success');
    } else {
      addMessage('⚠️ Region analysis completed but no data was generated. Please check your input files.', 'warning');
    }
  }, [onAnalysisComplete, autoExportEnabled, addMessage, onFileAdd, setStoredFiles, storedFiles.length]);

  const processRegionAnalysis = useCallback(async (analysisType = 'both') => {
    if (!canProcess()) {
      addMessage('Budget and Sales files are required for region analysis', 'error');
      return;
    }

    setProcessing(true);
    setLoading(true);
    
    try {
      const requestData = {
        sales_filepath: uploadedFiles.sales.filepath,
        budget_filepath: uploadedFiles.budget.filepath,
        total_sales_filepath: uploadedFiles.totalSales?.filepath,
        selected_sales_sheet: selectedSheets.sales,
        selected_budget_sheet: selectedSheets.budget,
        selected_total_sales_sheet: selectedSheets.totalSales,
      };

      addMessage('🔄 Processing Region-wise analysis...', 'info');

      const response = await fetch(`${API_BASE_URL}/region/process-region-analysis`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(requestData)
      });

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      const result = await response.json();

      if (result.success) {
        const mtData = result.data.mt_data ? {
          data: result.data.mt_data,
          columns: result.data.columns.mt_columns
        } : null;
        
        const valueData = result.data.value_data ? {
          data: result.data.value_data,
          columns: result.data.columns.value_columns
        } : null;
        
        const resultFiscalInfo = {
          current_year: result.data.fiscal_year || '25-26'
        };

        if (valueData && valueData.data && valueData.data.length > 0) {
          setActiveSubTab('value');
        } else if (mtData && mtData.data && mtData.data.length > 0) {
          setActiveSubTab('mt');
        }
        
        handleAnalysisSuccess(mtData, valueData, resultFiscalInfo);
        
      } else {
        addMessage(result.error || 'Region analysis failed', 'error');
      }
    } catch (error) {
      addMessage(`❌ Region analysis error: ${error.message}`, 'error');
    } finally {
      setLoading(false);
      setProcessing(false);
    }
  }, [canProcess, uploadedFiles, selectedSheets, addMessage, setLoading, handleAnalysisSuccess]);

  useEffect(() => {
    const timer = setTimeout(() => {
      if (canProcess() && !processing && !regionData.mt && !regionData.value) {
        console.log('🔄 Auto-processing Region analysis...');
        processRegionAnalysis('both');
      }
    }, 1000);

    return () => clearTimeout(timer);
  }, [uploadedFiles, selectedSheets, canProcess, processRegionAnalysis, processing, regionData]);

  const generateRegionReport = async (shouldStore = true) => {
    if (!regionData.mt && !regionData.value) {
      addMessage('No data available for report generation', 'error');
      return;
    }

    setLoading(true);
    try {
      const response = await fetch(`${API_BASE_URL}/region/generate-region-report`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          mt_data: regionData.mt?.data || [],
          value_data: regionData.value?.data || [],
          mt_columns: regionData.mt?.columns || [],
          value_columns: regionData.value?.columns || [],
          fiscal_year: fiscalInfo.current_year,
          uploaded_files: {
            budget: uploadedFiles.budget?.filename || '',
            sales: uploadedFiles.sales?.filename || '',
          },
          selected_sheets: selectedSheets
        })
      });

      const result = await response.json();

      if (result.success) {
        const byteCharacters = atob(result.data);
        const byteNumbers = new Array(byteCharacters.length);
        for (let i = 0; i < byteCharacters.length; i++) {
          byteNumbers[i] = byteCharacters.charCodeAt(i);
        }
        const byteArray = new Uint8Array(byteNumbers);
        const blob = new Blob([byteArray], { 
          type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' 
        });

        if (shouldStore) {
          const fileDescription = `Comprehensive region analysis report with insights, MT (${regionData.mt?.data?.length || 0} records) and Value (${regionData.value?.data?.length || 0} records) analysis for fiscal year ${fiscalInfo.current_year}`;
          await storeFileInSession(blob, result.filename, 'report', fileDescription);
        }

        const url = URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = result.filename;
        document.body.appendChild(a);
        a.click();
        document.body.removeChild(a);
        URL.revokeObjectURL(url);

        addMessage(`📁 Region Report ${shouldStore ? 'downloaded and stored' : 'downloaded'}: ${result.filename}`, 'success');
      } else {
        addMessage(result.error || 'Report generation failed', 'error');
      }
    } catch (error) {
      addMessage(`Report generation error: ${error.message}`, 'error');
    } finally {
      setLoading(false);
    }
  };

  const formatNumber = (value) => {
    if (typeof value === 'number') {
      return value.toLocaleString('en-IN', { 
        minimumFractionDigits: 2, 
        maximumFractionDigits: 2 
      });
    }
    return value;
  };

  const getRowClassName = (regionName) => {
    const name = (regionName || '').toString().toUpperCase();
    if (name.includes('NORTH TOTAL')) return 'north-total-row';
    if (name.includes('WEST SALES')) return 'west-total-row';
    if (name.includes('GROUP COMPANIES')) return 'group-total-row';
    if (name.includes('GRAND TOTAL')) return 'grand-total-row';
    if (name.includes('TOTAL')) return 'total-row';
    return '';
  };

  const DataTable = ({ data, title, analysisType, showRegionalHighlights = true }) => {
    if (!data || !data.data) return null;

    const columns = data.columns || [];

    const regionColumnNames = ['SALES in MT', 'SALES in Value', 'Region', 'REGION'];
    let regionColumn = columns[0];
    
    for (const colName of regionColumnNames) {
      if (columns.includes(colName)) {
        regionColumn = colName;
        break;
      }
    }

    return (
      <div className="data-preview">
        <div className="preview-header">
          <h4>{title}</h4>
        </div>

        {showRegionalHighlights && (
          <div className="regional-legend">
            <h5>Regional Classifications</h5>
            <div className="legend-items">
              <div className="legend-item north-legend">
                <span className="legend-dot north-dot"></span>
                North Total
              </div>
              <div className="legend-item west-legend">
                <span className="legend-dot west-dot"></span>
                West Sales
              </div>
              <div className="legend-item group-legend">
                <span className="legend-dot group-dot"></span>
                Group Companies
              </div>
              <div className="legend-item grand-legend">
                <span className="legend-dot grand-dot"></span>
                Grand Total
              </div>
            </div>
          </div>
        )}
        
        <div className="table-container">
          <table className="data-table">
            <thead>
              <tr>
                {columns.map((col, index) => (
                  <th key={index} className={col === regionColumn ? 'region-header' : 'data-header'}>{col}</th>
                ))}
              </tr>
            </thead>
            <tbody>
              {data.data.slice(0, 100).map((row, rowIndex) => {
                const rowClass = getRowClassName(row[regionColumn]);
                return (
                  <tr key={rowIndex} className={`${rowClass} ${
                    (row[regionColumn] || '').toString().toUpperCase().includes('TOTAL') ? 'total-row' : ''
                  }`}>
                    {columns.map((col, colIndex) => {
                      const value = row[col];
                      const isNumeric = typeof value === 'number' && !isNaN(value);
                      const formattedValue = isNumeric ? formatNumber(value) : (value || '');
                      
                      return (
                        <td 
                          key={colIndex} 
                          className={`${col === regionColumn ? 'region-cell' : 'data-cell'} ${isNumeric ? 'numeric' : ''}`}
                        >
                          {formattedValue}
                        </td>
                      );
                    })}
                  </tr>
                );
              })}
            </tbody>
          </table>
        </div>
        
        {data.data.length > 100 && (
          <div className="table-note">
            Showing first 100 rows of {data.data.length} total rows
          </div>
        )}
      </div>
    );
  };

  const AutoExportToggle = () => (
    <div className="auto-export-control">
      <label className="toggle-label">
        <input
          type="checkbox"
          checked={autoExportEnabled}
          onChange={(e) => {
            setAutoExportEnabled(e.target.checked);
            setHasAutoGenerated(false);
          }}
          className="toggle-input"
        />
        <span className="toggle-switch"></span>
        Auto-generate Excel file
      </label>
      <small className="toggle-help">
        Automatically generate combined region Excel file with both tables
      </small>
    </div>
  );

  const TablesPreviewTab = () => {
    const regionFiles = storedFiles.filter(f => f.type && f.type.includes('region'));
    
    return (
      <div className="tables-preview-section">
        <div className="table-section">
          <div className="table-section-header">
            <h4>Region-wise SALES in Quantity</h4>
            <div className="table-status">
              {regionData.mt ? (
                <span className="status-badge available">Available ({regionData.mt?.data?.length || 0} regions)</span>
              ) : (
                <span className="status-badge unavailable">Not Available</span>
              )}
            </div>
          </div>

          {regionData.mt ? (
            <DataTable
              data={regionData.mt}
              title={`Region-wise Budget and Actual Quantity (Month-wise) [${fiscalInfo.current_year}]`}
              analysisType="mt"
            />
          ) : (
            <div className="table-empty-state">
              <h4>No Region MT Data Available</h4>
              <p>
                {!canProcess() ? 
                  "Upload Budget and Sales files to start analysis" :
                  "Click 'Refresh Analysis' to generate MT data"
                }
              </p>
            </div>
          )}
        </div>

        <div className="table-separator"></div>

        <div className="table-section">
          <div className="table-section-header">
            <h4>Region-wise SALES in Value</h4>
            <div className="table-status">
              {regionData.value ? (
                <span className="status-badge available">Available ({regionData.value?.data?.length || 0} regions)</span>
              ) : (
                <span className="status-badge unavailable">Not Available</span>
              )}
            </div>
          </div>

          {regionData.value ? (
            <DataTable
              data={regionData.value}
              title={`Region-wise Budget and Actual Value (Month-wise) [${fiscalInfo.current_year}]`}
              analysisType="value"
            />
          ) : (
            <div className="table-empty-state">
              <h4>No Region Value Data Available</h4>
              <p>
                {!canProcess() ? 
                  "Upload Budget and Sales files to start analysis" :
                  "Click 'Refresh Analysis' to generate Value data"
                }
              </p>
            </div>
          )}
        </div>

        <div className="tables-summary">
          {(regionData.mt || regionData.value) && (
            <div className="export-merged-section">
              <div className="export-actions">
                <button
                  onClick={() => generateRegionReport(false)}
                  className="btn btn-primary btn-large"
                  disabled={loading}
                  title="Download comprehensive region analysis report"
                >
                  <Download size={16} />
                  {loading ? 'Processing...' : 'Download Region Report'}
                </button>
              </div>
            </div>
          )}
        </div>
      </div>
    );
  };

  return (
    <div className="region-analysis-section">
      <div className="section-header">
        <h1>Region-wise Analysis</h1>
        <div className="header-actions">
          <button
            onClick={() => processRegionAnalysis('both')}
            className="btn btn-primary"
            disabled={!canProcess() || loading || processing}
          >
            {processing ? <RefreshCw size={16} className="spin" /> : null}
            {processing ? 'Processing...' : 'Refresh Analysis'}
          </button>

          {storedFiles.some(f => f.type && f.type.includes('region')) && (
            <div className="integration-status-badge">
              <span>Latest file stored</span>
            </div>
          )}
        </div>
      </div>

      <div className="stats-overview">
        <div className="stat-card">
          <div className="stat-content">
            <span className="stat-number">{regionData.mt?.data?.length || 0}</span>
            <span className="stat-label">Region MT Records</span>
          </div>
        </div>
        <div className="stat-card">
          <div className="stat-content">
            <span className="stat-number">{regionData.value?.data?.length || 0}</span>
            <span className="stat-label">Region Value Records</span>
          </div>
        </div>
        <div className="stat-card">
          <div className="stat-content">
            <span className="stat-number">
              {storedFiles.filter(f => f.type && f.type.includes('region')).length > 0 ? '1' : '0'}
            </span>
            <span className="stat-label">Stored Files</span>
          </div>
        </div>
      </div>

      <nav className="sub-tab-navigation">
        <button
          className={`sub-tab ${activeSubTab === 'mt' ? 'active' : ''}`}
          onClick={() => setActiveSubTab('mt')}
          disabled={!regionData.mt && !processing}
        >
          SALES in MT
          {regionData.mt && <span className="data-indicator"></span>}
        </button>
        <button
          className={`sub-tab ${activeSubTab === 'value' ? 'active' : ''}`}
          onClick={() => setActiveSubTab('value')}
          disabled={!regionData.value && !processing}
        >
          SALES in Value
          {regionData.value && <span className="data-indicator"></span>}
        </button>
        <button
          className={`sub-tab ${activeSubTab === 'tables' ? 'active' : ''}`}
          onClick={() => setActiveSubTab('tables')}
        >
          <Eye size={16} />
          Tables Preview
          {storedFiles.some(f => f.type && f.type.includes('region')) && <span className="data-indicator"></span>}
        </button>
      </nav>

      <div className="sub-tab-content">
        {activeSubTab === 'mt' && (
          <div className="mt-analysis">
            {regionData.mt ? (
              <DataTable
                data={regionData.mt}
                title={`Region-wise Budget and Actual Tonnage (Month-wise) [${fiscalInfo.current_year || '25-26'}]`}
                analysisType="mt"
              />
            ) : (
              <div className="empty-state">
                <h3>No MT analysis data</h3>
                <p>
                  {!canProcess() ? 
                    "Upload Budget and Sales files to start analysis" :
                    "Click 'Refresh Analysis' to generate MT data"
                  }
                </p>
                {canProcess() && (
                  <button
                    onClick={() => processRegionAnalysis('mt')}
                    className="btn btn-primary"
                    disabled={loading || processing}
                  >
                    Generate MT Analysis
                  </button>
                )}
              </div>
            )}
          </div>
        )}

        {activeSubTab === 'value' && (
          <div className="value-analysis">
            {regionData.value ? (
              <DataTable
                data={regionData.value}
                title={`Region-wise Budget and Actual Value (Month-wise) [${fiscalInfo.current_year || '25-26'}]`}
                analysisType="value"
              />
            ) : (
              <div className="empty-state">
                <h3>No Value analysis data</h3>
                <p>
                  {!canProcess() ? 
                    "Upload Budget and Sales files to start analysis" :
                    "Click 'Refresh Analysis' to generate Value data"
                  }
                </p>
                {canProcess() && (
                  <button
                    onClick={() => processRegionAnalysis('value')}
                    className="btn btn-primary"
                    disabled={loading || processing}
                  >
                    Generate Value Analysis
                  </button>
                )}
              </div>
            )}
          </div>
        )}

        {activeSubTab === 'tables' && <TablesPreviewTab />}
      </div>

      {processing && (
        <div className="processing-indicator">
          <RefreshCw size={24} className="spin" />
          <span>Processing Region-wise analysis...</span>
        </div>
      )}

      <style jsx>{`
        .region-analysis-section {
          padding: 32px;
          font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen', 'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue', sans-serif;
          background-color: #f8fafc;
          min-height: 100vh;
        }

        .section-header {
          display: flex;
          justify-content: space-between;
          align-items: center;
          margin-bottom: 32px;
          background: white;
          padding: 16px 24px; /* Reduced padding to decrease size */
          border-radius: 8px; /* Slightly smaller border-radius */
          box-shadow: 0 1px 3px rgba(0,0,0,0.12), 0 1px 2px rgba(0,0,0,0.24);
        }

        .section-header h1 {
          margin: 0;
          color: #1e293b;
          font-size: 24px; /* Reduced font size */
          font-weight: 700;
          letter-spacing: -0.025em;
        }

        .header-actions {
          display: flex;
          gap: 16px;
          align-items: center;
        }

        .integration-status-badge {
          display: none;
        }

        .stats-overview {
          display: grid;
          grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
          gap: 16px;
          margin-bottom: 32px;
        }

        .stat-card {
          background: white;
          padding: 16px 20px;
          border-radius: 8px;
          box-shadow: 0 1px 3px rgba(0,0,0,0.12), 0 1px 2px rgba(0,0,0,0.24);
          transition: all 0.3s ease;
          border-left: 3px solid #3b82f6;
        }

        .stat-card:hover {
          transform: translateY(-1px);
          box-shadow: 0 4px 6px rgba(0,0,0,0.12), 0 2px 4px rgba(0,0,0,0.06);
        }

        .stat-content {
          display: flex;
          flex-direction: column;
          gap: 4px;
        }

        .stat-number {
          font-size: 24px;
          font-weight: 700;
          color: #1e293b;
          line-height: 1;
        }

        .stat-label {
          font-size: 12px;
          color: #64748b;
          text-transform: uppercase;
          letter-spacing: 0.05em;
          font-weight: 600;
        }

        .sub-tab-navigation {
          display: flex;
          background: white;
          border-radius: 12px;
          box-shadow: 0 1px 3px rgba(0,0,0,0.12), 0 1px 2px rgba(0,0,0,0.24);
          overflow: hidden;
          margin-bottom: 32px;
        }

        .sub-tab {
          display: flex;
          align-items: center;
          gap: 12px;
          padding: 20px 32px;
          background: none;
          border: none;
          border-bottom: 3px solid transparent;
          cursor: pointer;
          font-size: 16px;
          font-weight: 600;
          color: #64748b;
          transition: all 0.3s ease;
          flex: 1;
          justify-content: center;
          position: relative;
        }

        .sub-tab:hover:not(:disabled) {
          color: #1e293b;
          background: #f8fafc;
        }

        .sub-tab.active {
          color: #3b82f6;
          border-bottom-color: #3b82f6;
          background: white;
        }

        .sub-tab:disabled {
          opacity: 0.5;
          cursor: not-allowed;
        }

        .data-indicator {
          width: 8px;
          height: 8px;
          background: #10b981;
          border-radius: 50%;
          animation: pulse 2s infinite;
        }

        @keyframes pulse {
          0%, 100% { opacity: 1; }
          50% { opacity: 0.5; }
        }

        .sub-tab-content {
          min-height: 400px;
        }

        .auto-export-control {
          margin-top: 32px;
          padding: 24px;
          background: white;
          border-radius: 12px;
          box-shadow: 0 1px 3px rgba(0,0,0,0.12), 0 1px 2px rgba(0,0,0,0.24);
        }

        .toggle-label {
          display: flex;
          align-items: center;
          gap: 16px;
          cursor: pointer;
          font-size: 16px;
          font-weight: 600;
          color: #1e293b;
        }

        .toggle-input {
          display: none;
        }

        .toggle-switch {
          position: relative;
          width: 52px;
          height: 28px;
          background: #cbd5e1;
          border-radius: 14px;
          transition: background 0.3s ease;
        }

        .toggle-switch::before {
          content: '';
          position: absolute;
          top: 2px;
          left: 2px;
          width: 24px;
          height: 24px;
          background: white;
          border-radius: 50%;
          transition: transform 0.3s ease;
          box-shadow: 0 2px 4px rgba(0,0,0,0.2);
        }

        .toggle-input:checked + .toggle-switch {
          background: #3b82f6;
        }

        .toggle-input:checked + .toggle-switch::before {
          transform: translateX(24px);
        }

        .toggle-help {
          display: block;
          margin-top: 12px;
          color: #64748b;
          font-size: 14px;
          font-weight: 400;
          line-height: 1.5;
        }

        .tables-preview-section {
          padding: 0;
        }

        .table-section {
          margin-bottom: 32px;
          border: 1px solid #e2e8f0;
          border-radius: 12px;
          overflow: hidden;
          background: white;
          box-shadow: 0 1px 3px rgba(0,0,0,0.12), 0 1px 2px rgba(0,0,0,0.24);
        }

        .table-section-header {
          display: flex;
          justify-content: space-between;
          align-items: center;
          padding: 24px 32px;
          background: #f8fafc;
          border-bottom: 1px solid #e2e8f0;
        }

        .table-section-header h4 {
          margin: 0;
          color: #1e293b;
          font-size: 20px;
          font-weight: 700;
        }

        .table-status {
          display: flex;
          align-items: center;
        }

        .status-badge {
          padding: 8px 16px;
          border-radius: 20px;
          font-size: 14px;
          font-weight: 600;
          border: 1px solid;
        }

        .status-badge.available {
          background: #d1fae5;
          color: #065f46;
          border-color: #a7f3d0;
        }

        .status-badge.unavailable {
          background: #fee2e2;
          color: #991b1b;
          border-color: #fecaca;
        }

        .table-empty-state {
          text-align: center;
          padding: 80px 32px;
          color: #64748b;
        }

        .table-empty-state h4 {
          margin: 0 0 16px;
          color: #1e293b;
          font-size: 24px;
          font-weight: 700;
        }

        .table-empty-state p {
          color: #64748b;
          max-width: 500px;
          margin: 0 auto 24px;
          line-height: 1.6;
          font-size: 16px;
        }

        .table-separator {
          height: 24px;
        }

        .tables-summary {
          background: white;
          border: 1px solid #e2e8f0;
          border-radius: 12px;
          padding: 32px;
          margin-top: 32px;
          box-shadow: 0 1px 3px rgba(0,0,0,0.12), 0 1px 2px rgba(0,0,0,0.24);
        }

        .export-merged-section {
          padding: 24px;
          background: #f8fafc;
          border: 2px dashed #3b82f6;
          border-radius: 12px;
          text-align: center;
        }

        .export-actions {
          display: flex;
          gap: 16px;
          justify-content: center;
          flex-wrap: wrap;
        }

        .empty-state {
          display: flex;
          flex-direction: column;
          align-items: center;
          justify-content: center;
          padding: 80px 32px;
          text-align: center;
          background: white;
          border-radius: 12px;
          box-shadow: 0 1px 3px rgba(0,0,0,0.12), 0 1px 2px rgba(0,0,0,0.24);
        }

        .empty-state h3 {
          margin: 0 0 16px;
          font-size: 24px;
          color: #1e293b;
          font-weight: 700;
        }

        .empty-state p {
          margin: 0 0 24px;
          font-size: 16px;
          color: #64748b;
          max-width: 400px;
          line-height: 1.6;
        }

        .data-preview {
          background: white;
          border-radius: 0;
          overflow: hidden;
        }

        .preview-header {
          display: flex;
          justify-content: space-between;
          align-items: center;
          padding: 24px 32px;
          background: #f8fafc;
          border-bottom: 1px solid #e2e8f0;
        }

        .preview-header h4 {
          margin: 0;
          font-size: 18px;
          font-weight: 700;
          color: #1e293b;
        }

        .regional-legend {
          margin: 24px 32px;
          padding: 20px;
          background: #f1f5f9;
          border-radius: 8px;
        }

        .regional-legend h5 {
          margin: 0 0 16px;
          color: #1e293b;
          font-size: 16px;
          font-weight: 700;
        }

        .legend-items {
          display: flex;
          flex-wrap: wrap;
          gap: 16px;
        }

        .legend-item {
          display: flex;
          align-items: center;
          gap: 8px;
          padding: 8px 12px;
          border-radius: 6px;
          font-size: 14px;
          font-weight: 600;
        }

        .legend-dot {
          width: 10px;
          height: 10px;
          border-radius: 50%;
        }

        .north-legend {
          background: #d1fae5;
          color: #065f46;
        }
        .north-dot {
          background: #10b981;
        }

        .west-legend {
          background: #fef3c7;
          color: #92400e;
        }
        .west-dot {
          background: #f59e0b;
        }

        .group-legend {
          background: #dbeafe;
          color: #1e40af;
        }
        .group-dot {
          background: #3b82f6;
        }

        .grand-legend {
          background: #dcfce7;
          color: #166534;
        }
        .grand-dot {
          background: #22c55e;
        }

        .table-container {
          overflow-x: auto;
          max-height: 600px;
          overflow-y: auto;
        }

        .data-table {
          width: 100%;
          border-collapse: collapse;
          font-size: 14px;
        }

        .data-table th {
          background: #f8fafc;
          color: #374151;
          padding: 16px 12px;
          text-align: left;
          font-weight: 700;
          position: sticky;
          top: 0;
          z-index: 10;
          border-bottom: 2px solid #e2e8f0;
          border-right: 1px solid #e2e8f0;
        }

        .region-header {
          background: #1e40af !important;
          color: white !important;
          min-width: 200px;
          position: sticky;
          left: 0;
          z-index: 11;
        }

        .data-header {
          text-align: center !important;
          min-width: 100px;
        }

        .data-table td {
          padding: 12px;
          border-bottom: 1px solid #f1f5f9;
          border-right: 1px solid #f1f5f9;
          white-space: nowrap;
        }

        .region-cell {
          font-weight: 600;
          color: #1e293b;
          background: #f8fafc;
          position: sticky;
          left: 0;
          z-index: 5;
          border-right: 2px solid #1e40af;
          min-width: 200px;
        }

        .data-cell {
          font-family: 'SF Mono', 'Monaco', 'Inconsolata', 'Roboto Mono', monospace;
          font-size: 14px;
          text-align: right;
        }

        .data-cell.numeric {
          text-align: right;
        }

        .north-total-row {
          background: #d1fae5 !important;
        }
        .north-total-row .region-cell {
          background: #10b981 !important;
          color: white !important;
          font-weight: 800;
        }

        .west-total-row {
          background: #fef3c7 !important;
        }
        .west-total-row .region-cell {
          background: #f59e0b !important;
          color: white !important;
          font-weight: 800;
        }

        .group-total-row {
          background: #dbeafe !important;
        }
        .group-total-row .region-cell {
          background: #3b82f6 !important;
          color: white !important;
          font-weight: 800;
        }

        .grand-total-row {
          background: #dcfce7 !important;
        }
        .grand-total-row .region-cell {
          background: #22c55e !important;
          color: white !important;
          font-weight: 800;
        }

        .total-row {
          font-weight: 600;
        }

        .data-table tr:hover {
          background: #f8fafc;
        }

        .data-table tr:hover .region-cell {
          background: #e2e8f0;
        }

        .data-table tr.total-row:hover .region-cell {
          opacity: 0.9;
        }

        .table-note {
          padding: 16px 32px;
          background: #f8fafc;
          border-top: 1px solid #e2e8f0;
          font-size: 14px;
          color: #64748b;
          text-align: center;
        }

        .processing-indicator {
          display: flex;
          align-items: center;
          justify-content: center;
          gap: 12px;
          padding: 48px;
          color: #64748b;
          background: white;
          border-radius: 12px;
          margin: 32px 0;
          box-shadow: 0 1px 3px rgba(0,0,0,0.12), 0 1px 2px rgba(0,0,0,0.24);
          font-size: 16px;
          font-weight: 600;
        }

        .btn {
          display: inline-flex;
          align-items: center;
          gap: 12px;
          padding: 12px 24px;
          border: none;
          border-radius: 8px;
          font-size: 16px;
          font-weight: 600;
          cursor: pointer;
          transition: all 0.3s ease;
          text-decoration: none;
          font-family: inherit;
        }

        .btn:disabled {
          opacity: 0.6;
          cursor: not-allowed;
          transform: none !important;
        }

        .btn-primary {
          background: #3b82f6;
          color: white;
          box-shadow: 0 4px 6px rgba(59, 130, 246, 0.25);
        }

        .btn-primary:hover:not(:disabled) {
          background: #2563eb;
          transform: translateY(-1px);
          box-shadow: 0 6px 8px rgba(59, 130, 246, 0.3);
        }

        .btn-large {
          padding: 16px 32px;
          font-size: 18px;
          font-weight: 700;
        }

        @keyframes spin {
          from { transform: rotate(0deg); }
          to { transform: rotate(360deg); }
        }

        .spin {
          animation: spin 1s linear infinite;
        }

        @media (max-width: 1024px) {
          .region-analysis-section {
            padding: 24px;
          }

          .export-actions {
            flex-direction: column;
            align-items: stretch;
          }
        }

        @media (max-width: 768px) {
          .region-analysis-section {
            padding: 16px;
          }

          .section-header {
            flex-direction: column;
            gap: 20px;
            align-items: stretch;
            text-align: center;
            padding: 12px 16px; /* Adjusted for smaller screens */
          }

          .section-header h1 {
            font-size: 20px; /* Further reduced for smaller screens */
          }

          .stats-overview {
            grid-template-columns: 1fr;
          }

          .sub-tab-navigation {
            flex-direction: column;
          }

          .sub-tab {
            justify-content: center;
            padding: 16px 24px;
          }

          .table-section-header {
            flex-direction: column;
            gap: 16px;
            align-items: stretch;
            text-align: center;
            padding: 20px;
          }

          .export-actions {
            flex-direction: column;
            align-items: stretch;
          }

          .legend-items {
            flex-direction: column;
            gap: 12px;
          }

          .data-table th.region-header,
          .data-table td.region-cell {
            min-width: 150px;
          }

          .toggle-label {
            flex-direction: column;
            align-items: flex-start;
            gap: 12px;
          }
        }

        @media (max-width: 480px) {
          .region-analysis-section {
            padding: 12px;
          }

          .section-header {
            padding: 10px 12px; /* Further reduced for very small screens */
          }

          .section-header h1 {
            font-size: 18px; /* Further reduced font size */
          }

          .stat-card {
            padding: 24px;
          }

          .stat-number {
            font-size: 32px;
          }

          .sub-tab {
            padding: 14px 20px;
            font-size: 14px;
          }

          .auto-export-control {
            padding: 20px;
          }

          .tables-summary {
            padding: 20px;
          }

          .data-table {
            font-size: 13px;
          }

          .data-table th,
          .data-table td {
            padding: 10px 8px;
          }

          .btn {
            padding: 10px 20px;
            font-size: 14px;
          }

          .btn-large {
            padding: 14px 28px;
            font-size: 16px;
          }

          .export-merged-section {
            padding: 20px;
          }
        }
      `}</style>
    </div>
  );
};

export default RegionAnalysis;
